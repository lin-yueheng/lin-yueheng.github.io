{
    "version": "https://jsonfeed.org/version/1",
    "title": "диво • All posts by \"零基础学java语言-浙江大学-翁恺\" category",
    "description": "在努力提升你喜欢我的概率，即使是从0开始！~~（@ @）~~",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/computer-science/java/course-1/javaweb/",
            "url": "http://example.com/computer-science/java/course-1/javaweb/",
            "title": "javaWeb",
            "date_published": "2022-12-15T03:52:14.000Z",
            "content_html": "<h2 id=\"综合案例\"><a class=\"markdownIt-Anchor\" href=\"#综合案例\">#</a> 综合案例</h2>\n<p><strong>今日目标：</strong></p>\n<blockquote>\n<ul>\n<li>能够完成查询所有功能</li>\n<li>能够完成添加功能</li>\n<li>能够理解 BaseServlet 思想</li>\n<li>能够完成批量删除功能</li>\n<li>能够完成分页查询功能</li>\n<li>能够完成条件查询功能</li>\n</ul>\n</blockquote>\n<h2 id=\"1功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#1功能介绍\">#</a> 1，功能介绍</h2>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210825171411003.png\" alt=\"image-20210825171411003\"></p>\n<p>以上是我们在综合案例要实现的功能。对数据的除了对数据的增删改查功能外，还有一些复杂的功能，如  <code>批量删除</code> 、 <code>分页查询</code> 、 <code>条件查询</code>  等功能</p>\n<ul>\n<li><code>批量删除</code>  功能：每条数据前都有复选框，当我选中多条数据并点击  <code>批量删除</code>  按钮后，会发送请求到后端并删除数据库中指定的多条数据。</li>\n<li><code>分页查询</code>  功能：当数据库中有很多数据时，我们不可能将所有的数据展示在一页里，这个时候就需要分页展示数据。</li>\n<li><code>条件查询</code>  功能：数据库量大的时候，我们就需要精确的查询一些想看到的数据，这个时候就需要通过条件查询。</li>\n</ul>\n<p>这里的  <code>修改品牌</code>  和  <code>删除品牌</code>  功能在课程上不做讲解，留作同学来下的练习。</p>\n<h2 id=\"2环境准备\"><a class=\"markdownIt-Anchor\" href=\"#2环境准备\">#</a> 2，环境准备</h2>\n<p>环境准备我们主要完成以下两件事即可</p>\n<ul>\n<li>将资料的 brand-case 模块导入到 idea 中</li>\n<li>执行资料中提供的 tb_brand.sql 脚本</li>\n</ul>\n<h3 id=\"21-工程准备\"><a class=\"markdownIt-Anchor\" href=\"#21-工程准备\">#</a> 2.1  工程准备</h3>\n<p>将  <code>04-资料\\01-初始工程</code>  中的  <code>brand-case</code>  工程导入到我们自己的 idea 中。工程结构如下：</p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210825195522904.png\" alt=\"image-20210825195522904\" style=\"zoom:80%;\" />\n<h3 id=\"22-创建表\"><a class=\"markdownIt-Anchor\" href=\"#22-创建表\">#</a> 2.2  创建表</h3>\n<p>下面是创建表的语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除tb_brand表</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> tb_brand;</span><br><span class=\"line\"><span class=\"comment\">-- 创建tb_brand表</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_brand (</span><br><span class=\"line\">    <span class=\"comment\">-- id 主键</span></span><br><span class=\"line\">    id           <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,</span><br><span class=\"line\">    <span class=\"comment\">-- 品牌名称</span></span><br><span class=\"line\">    brand_name   <span class=\"type\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    <span class=\"comment\">-- 企业名称</span></span><br><span class=\"line\">    company_name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">    <span class=\"comment\">-- 排序字段</span></span><br><span class=\"line\">    ordered      <span class=\"type\">int</span>,</span><br><span class=\"line\">    <span class=\"comment\">-- 描述信息</span></span><br><span class=\"line\">    description  <span class=\"type\">varchar</span>(<span class=\"number\">100</span>),</span><br><span class=\"line\">    <span class=\"comment\">-- 状态：0：禁用  1：启用</span></span><br><span class=\"line\">    status       <span class=\"type\">int</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">-- 添加数据</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class=\"line\"><span class=\"keyword\">values</span> </span><br><span class=\"line\">       (<span class=\"string\">&#x27;华为&#x27;</span>, <span class=\"string\">&#x27;华为技术有限公司&#x27;</span>, <span class=\"number\">100</span>, <span class=\"string\">&#x27;万物互联&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;格力&#x27;</span>, <span class=\"string\">&#x27;格力电器股份有限公司&#x27;</span>, <span class=\"number\">30</span>, <span class=\"string\">&#x27;让世界爱上中国造&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class=\"number\">10</span>, <span class=\"string\">&#x27;买买买&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"string\">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;玩玩玩&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;百度&#x27;</span>, <span class=\"string\">&#x27;百度在线网络技术公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;搜搜搜&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;京东&#x27;</span>, <span class=\"string\">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class=\"number\">40</span>, <span class=\"string\">&#x27;就是快&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;三只松鼠&#x27;</span>, <span class=\"string\">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;好吃不上火&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;华为&#x27;</span>, <span class=\"string\">&#x27;华为技术有限公司&#x27;</span>, <span class=\"number\">100</span>, <span class=\"string\">&#x27;万物互联&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;格力&#x27;</span>, <span class=\"string\">&#x27;格力电器股份有限公司&#x27;</span>, <span class=\"number\">30</span>, <span class=\"string\">&#x27;让世界爱上中国造&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class=\"number\">10</span>, <span class=\"string\">&#x27;买买买&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"string\">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;玩玩玩&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;百度&#x27;</span>, <span class=\"string\">&#x27;百度在线网络技术公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;搜搜搜&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;京东&#x27;</span>, <span class=\"string\">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class=\"number\">40</span>, <span class=\"string\">&#x27;就是快&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;华为&#x27;</span>, <span class=\"string\">&#x27;华为技术有限公司&#x27;</span>, <span class=\"number\">100</span>, <span class=\"string\">&#x27;万物互联&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;格力&#x27;</span>, <span class=\"string\">&#x27;格力电器股份有限公司&#x27;</span>, <span class=\"number\">30</span>, <span class=\"string\">&#x27;让世界爱上中国造&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class=\"number\">10</span>, <span class=\"string\">&#x27;买买买&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"string\">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;玩玩玩&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;百度&#x27;</span>, <span class=\"string\">&#x27;百度在线网络技术公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;搜搜搜&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;京东&#x27;</span>, <span class=\"string\">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class=\"number\">40</span>, <span class=\"string\">&#x27;就是快&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;三只松鼠&#x27;</span>, <span class=\"string\">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;好吃不上火&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;华为&#x27;</span>, <span class=\"string\">&#x27;华为技术有限公司&#x27;</span>, <span class=\"number\">100</span>, <span class=\"string\">&#x27;万物互联&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;格力&#x27;</span>, <span class=\"string\">&#x27;格力电器股份有限公司&#x27;</span>, <span class=\"number\">30</span>, <span class=\"string\">&#x27;让世界爱上中国造&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class=\"number\">10</span>, <span class=\"string\">&#x27;买买买&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"string\">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;玩玩玩&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;百度&#x27;</span>, <span class=\"string\">&#x27;百度在线网络技术公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;搜搜搜&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;京东&#x27;</span>, <span class=\"string\">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class=\"number\">40</span>, <span class=\"string\">&#x27;就是快&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;华为&#x27;</span>, <span class=\"string\">&#x27;华为技术有限公司&#x27;</span>, <span class=\"number\">100</span>, <span class=\"string\">&#x27;万物互联&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;格力&#x27;</span>, <span class=\"string\">&#x27;格力电器股份有限公司&#x27;</span>, <span class=\"number\">30</span>, <span class=\"string\">&#x27;让世界爱上中国造&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class=\"number\">10</span>, <span class=\"string\">&#x27;买买买&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"string\">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;玩玩玩&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;百度&#x27;</span>, <span class=\"string\">&#x27;百度在线网络技术公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;搜搜搜&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;京东&#x27;</span>, <span class=\"string\">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class=\"number\">40</span>, <span class=\"string\">&#x27;就是快&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;三只松鼠&#x27;</span>, <span class=\"string\">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;好吃不上火&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;华为&#x27;</span>, <span class=\"string\">&#x27;华为技术有限公司&#x27;</span>, <span class=\"number\">100</span>, <span class=\"string\">&#x27;万物互联&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;小米&#x27;</span>, <span class=\"string\">&#x27;小米科技有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;are you ok&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;格力&#x27;</span>, <span class=\"string\">&#x27;格力电器股份有限公司&#x27;</span>, <span class=\"number\">30</span>, <span class=\"string\">&#x27;让世界爱上中国造&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;阿里巴巴&#x27;</span>, <span class=\"string\">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class=\"number\">10</span>, <span class=\"string\">&#x27;买买买&#x27;</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;腾讯&#x27;</span>, <span class=\"string\">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class=\"number\">50</span>, <span class=\"string\">&#x27;玩玩玩&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;百度&#x27;</span>, <span class=\"string\">&#x27;百度在线网络技术公司&#x27;</span>, <span class=\"number\">5</span>, <span class=\"string\">&#x27;搜搜搜&#x27;</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">       (<span class=\"string\">&#x27;京东&#x27;</span>, <span class=\"string\">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class=\"number\">40</span>, <span class=\"string\">&#x27;就是快&#x27;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3查询所有功能\"><a class=\"markdownIt-Anchor\" href=\"#3查询所有功能\">#</a> 3，查询所有功能</h2>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210825200138600.png\" alt=\"image-20210825200138600\"></p>\n<p>如上图所示是查询所有品牌数据在页面展示的效果。要实现这个功能，要先搞明白如下问题：</p>\n<ul>\n<li>\n<p>什么时候发送异步请求？</p>\n<p>页面加载完毕后就需要在页面上看到所有的品牌数据。所以在  <code>mounted()</code>  这个构造函数中写发送异步请求的代码。</p>\n</li>\n<li>\n<p>请求需要携带参数吗？</p>\n<p>查询所有功能不需要携带什么参数。</p>\n</li>\n<li>\n<p>响应的数据格式是什么样？</p>\n<p>后端是需要将  <code>List&lt;Brand&gt;</code>  对象转换为 JSON 格式的数据并响应回给浏览器。响应数据格式如下：</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210825201634849.png\" alt=\"image-20210825201634849\"></p>\n</li>\n</ul>\n<p>整体流程如下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153828.png\" alt=\"image-20210825200332542\"></p>\n<p>我们先实现后端程序，然后再实现前端程序。</p>\n<h3 id=\"31-后端实现\"><a class=\"markdownIt-Anchor\" href=\"#31-后端实现\">#</a> 3.1 后端实现</h3>\n<h4 id=\"311-dao方法实现\"><a class=\"markdownIt-Anchor\" href=\"#311-dao方法实现\">#</a> 3.1.1  dao 方法实现</h4>\n<p>在  <code>com.itheima.mapper.BrandMapper</code>  接口中定义抽象方法，并使用  <code>@Select</code>  注解编写 sql 语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from tb_brand&quot;)</span></span><br><span class=\"line\">List&lt;Brand&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n<p>由于表中有些字段名和实体类中的属性名没有对应，所以需要在  <code>com/itheima/mapper/BrandMapper.xml</code>  映射配置文件中定义结果映射 ，使用 <code>resultMap</code>  标签。映射配置文件内容如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.itheima.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;brandResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;brand&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;brandName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;brand_name&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;companyName&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;company_name&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>定义完结果映射关系后，在接口  <code>selectAll()</code>  方法上引用该结构映射。使用  <code>@ResultMap(&quot;brandResultMap&quot;)</code>  注解</p>\n<p>完整接口的  <code>selectAll()</code>  方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from tb_brand&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResultMap(&quot;brandResultMap&quot;)</span></span><br><span class=\"line\">List&lt;Brand&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"312-service方法实现\"><a class=\"markdownIt-Anchor\" href=\"#312-service方法实现\">#</a> 3.1.2  service 方法实现</h4>\n<p>在  <code>com.itheima.service</code>  包下创建  <code>BrandService</code>  接口，在该接口中定义查询所有的抽象方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BrandService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    List&lt;Brand&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>并在  <code>com.itheima.service</code>  下再创建  <code>impl</code>  包； <code>impl</code>  表示是放 service 层接口的实现类的包。 在该包下创建名为  <code>BrandServiceImpl</code>  类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BrandServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BrandService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Brand&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处为什么要给 service 定义接口呢？因为 service 定义了接口后，在 servlet 中就可以使用多态的形式创建 Service 实现类的对象，如下：</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153836.png\" alt=\"image-20210825203843142\" style=\"zoom:80%;\" />\n<p>这里使用多态是因为方便我们后期解除  <code>Servlet</code>  和  <code>service</code>  的耦合。从上面的代码我们可以看到  <code>SelectAllServlet</code>  类和  <code>BrandServiceImpl</code>  类之间是耦合在一起的，如果后期  <code>BrandService</code>  有其它更好的实现类（例如叫  <code>BrandServiceImpl</code> ），那就需要修改  <code>SelectAllServlet</code>  类中的代码。后面我们学习了  <code>Spring</code>  框架后就可以解除  <code>SelectAllServlet</code>  类和红色框括起来的代码耦合。而现在咱们还做不到解除耦合，在这里只需要理解为什么定义接口即可。</p>\n<p><code>BrandServiceImpl</code>  类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BrandServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BrandService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 创建SqlSessionFactory 工厂对象</span></span><br><span class=\"line\">    <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Brand&gt; <span class=\"title function_\">selectAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//2. 获取SqlSession对象</span></span><br><span class=\"line\">        <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\">        <span class=\"comment\">//3. 获取BrandMapper</span></span><br><span class=\"line\">        <span class=\"type\">BrandMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4. 调用方法</span></span><br><span class=\"line\">        List&lt;Brand&gt; brands = mapper.selectAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//5. 释放资源</span></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> brands;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"313-servlet实现\"><a class=\"markdownIt-Anchor\" href=\"#313-servlet实现\">#</a> 3.1.3  servlet 实现</h4>\n<p>在  <code>com.itheima.web.servlet</code>  包下定义名为  <code>SelectAllServlet</code>  的查询所有的  <code>servlet</code> 。该  <code>servlet</code>  逻辑如下：</p>\n<ul>\n<li>调用 service 的  <code>selectAll()</code>  方法查询所有的品牌数据，并接口返回结果</li>\n<li>将返回的结果转换为 json 数据</li>\n<li>响应 json 数据</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/selectAllServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SelectAllServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">BrandService</span> <span class=\"variable\">brandService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BrandServiceImpl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 调用service查询</span></span><br><span class=\"line\">        List&lt;Brand&gt; brands = brandService.selectAll();</span><br><span class=\"line\">        <span class=\"comment\">//2. 转为JSON</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> JSON.toJSONString(brands);</span><br><span class=\"line\">        <span class=\"comment\">//3. 写数据</span></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;text/json;charset=utf-8&quot;</span>); <span class=\"comment\">//告知浏览器响应的数据是什么， 告知浏览器使用什么字符集进行解码</span></span><br><span class=\"line\">        response.getWriter().write(jsonString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doGet(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"314-测试后端程序\"><a class=\"markdownIt-Anchor\" href=\"#314-测试后端程序\">#</a> 3.1.4  测试后端程序</h4>\n<p>在浏览器输入访问 servlet 的资源路径  <code>http://localhost:8080/brand-case/selectAllServlet</code>  ，如果没有报错，并能看到如下信息表明后端程序没有问题</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210825205133752.png\" alt=\"image-20210825205133752\"></p>\n<h3 id=\"32-前端实现\"><a class=\"markdownIt-Anchor\" href=\"#32-前端实现\">#</a> 3.2  前端实现</h3>\n<p>前端需要在页面加载完毕后发送 ajax 请求，所以发送请求的逻辑应该放在  <code>mounted()</code>  钩子函数中。而响应回来的数据需要赋值给表格绑定的数据模型，从下图可以看出表格绑定的数据模型是  <code>tableData</code></p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153765.png\" alt=\"image-20210825220436889\" style=\"zoom:70%;\" />\n<p>前端代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当页面加载完成后，发送异步请求，获取数据</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>:<span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/selectAllServlet&quot;</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4添加功能\"><a class=\"markdownIt-Anchor\" href=\"#4添加功能\">#</a> 4，添加功能</h2>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210825221138245.png\" alt=\"image-20210825221138245\" style=\"zoom:70%;\" />\n<p>上图是添加数据的对话框，当点击  <code>提交</code>  按钮后就需要将数据提交到后端，并将数据保存到数据库中。下图是整体的流程：</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210825221329231.png\" alt=\"image-20210825221329231\"></p>\n<p>页面发送请求时，需要将输入框输入的内容提交给后端程序，而这里是以 json 格式进行传递的。而具体的数据格式如下：</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210826185917510.png\" alt=\"image-20210826185917510\"></p>\n<blockquote>\n<p><mark>注意：由于是添加数据，所以上述 json 数据中 id 是没有值的。</mark></p>\n</blockquote>\n<h3 id=\"41-后端实现\"><a class=\"markdownIt-Anchor\" href=\"#41-后端实现\">#</a> 4.1  后端实现</h3>\n<h4 id=\"411-dao方法实现\"><a class=\"markdownIt-Anchor\" href=\"#411-dao方法实现\">#</a> 4.1.1  dao 方法实现</h4>\n<p>在  <code>BrandMapper</code>  接口中定义  <code>add()</code>  添加方法，并使用  <code>@Insert</code>  注解编写 sql 语句</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> brand</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Insert(&quot;insert into tb_brand values(null,#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"412-service方法实现\"><a class=\"markdownIt-Anchor\" href=\"#412-service方法实现\">#</a> 4.1.2  service 方法实现</h4>\n<p>在  <code>BrandService</code>  接口中定义  <code>add()</code>  添加数据的业务逻辑方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> brand</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>\n<p>在  <code>BrandServiceImpl</code>  类中重写  <code>add()</code>  方法，并进行业务逻辑实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Brand brand)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//2. 获取SqlSession对象</span></span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\">    <span class=\"comment\">//3. 获取BrandMapper</span></span><br><span class=\"line\">    <span class=\"type\">BrandMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4. 调用方法</span></span><br><span class=\"line\">    mapper.add(brand);</span><br><span class=\"line\">    sqlSession.commit();<span class=\"comment\">//提交事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//5. 释放资源</span></span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><mark>注意：增删改操作一定要提交事务。</mark></p>\n</blockquote>\n<h4 id=\"413-servlet实现\"><a class=\"markdownIt-Anchor\" href=\"#413-servlet实现\">#</a> 4.1.3  servlet 实现</h4>\n<p>在  <code>com.itheima.web.servlet</code>  包写定义名为  <code>AddServlet</code>  的 Servlet。该 Servlet 的逻辑如下：</p>\n<ul>\n<li>接收页面提交的数据。页面到时候提交的数据是 json 格式的数据，所以此处需要使用输入流读取数据</li>\n<li>将接收到的数据转换为  <code>Brand</code>  对象</li>\n<li>调用 service 的  <code>add()</code>  方法进行添加的业务逻辑处理</li>\n<li>给浏览器响应添加成功的标识，这里直接给浏览器响应  <code>success</code>  字符串表示成功</li>\n</ul>\n<p>servlet 代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/addServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AddServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">BrandService</span> <span class=\"variable\">brandService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BrandServiceImpl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1. 接收品牌数据</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> br.readLine();<span class=\"comment\">//json字符串</span></span><br><span class=\"line\">        <span class=\"comment\">//转为Brand对象</span></span><br><span class=\"line\">        <span class=\"type\">Brand</span> <span class=\"variable\">brand</span> <span class=\"operator\">=</span> JSON.parseObject(params, Brand.class);</span><br><span class=\"line\">        <span class=\"comment\">//2. 调用service添加</span></span><br><span class=\"line\">        brandService.add(brand);</span><br><span class=\"line\">        <span class=\"comment\">//3. 响应成功的标识</span></span><br><span class=\"line\">        response.getWriter().write(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doGet(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"42-前端实现\"><a class=\"markdownIt-Anchor\" href=\"#42-前端实现\">#</a> 4.2  前端实现</h3>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153038.png\" alt=\"image-20210825223121993\" style=\"zoom:60%;\" />\n<p>上图左边是页面效果，里面的  <code>提交</code>  按钮可以通过上图右边看出绑定了一个 单击事件，而该事件绑定的是  <code>addBrand</code>  函数，所以添加数据功能的逻辑代码应该写在  <code>addBrand()</code>   函数中。在此方法中需要发送异步请求并将表单中输入的数据作为参数进行传递。如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加数据</span></span><br><span class=\"line\"><span class=\"title function_\">addBrand</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送ajax请求，添加数据</span></span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/addServlet&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>:_this.<span class=\"property\">brand</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">       \t<span class=\"comment\">//响应数据的处理逻辑</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在  <code>then</code>  函数中的匿名函数是成功后的回调函数，而  <code>resp.data</code>  就可以获取到响应回来的数据，如果值是  <code>success</code>  表示数据添加成功。成功后我们需要做一下逻辑处理：</p>\n<ol>\n<li>\n<p><strong>关闭新增对话框窗口</strong></p>\n<p>如下图所示是添加数据的对话框代码，从代码中可以看到此对话框绑定了  <code>dialogVisible</code>  数据模型，只需要将该数据模型的值设置为 false，就可以关闭新增对话框窗口了。</p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210825223933953.png\" alt=\"image-20210825223933953\" style=\"zoom:70%;\" />\n</li>\n<li>\n<p><strong>重新查询数据</strong></p>\n<p>数据添加成功与否，用户只要能在页面上查看到数据说明添加成功。而此处需要重新发送异步请求获取所有的品牌数据，而这段代码在  <code>查询所有</code>  功能中已经实现，所以我们可以将此功能代码进行抽取，抽取到一个  <code>selectAll()</code>  函数中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询所有数据</span></span><br><span class=\"line\"><span class=\"title function_\">selectAll</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>:<span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/selectAllServlet&quot;</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么就需要将  <code>mounted()</code>  钩子函数中代码改进为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当页面加载完成后，发送异步请求，获取数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时在新增响应的回调中调用  <code>selectAll()</code>  进行数据的重新查询。</p>\n</li>\n<li>\n<p><strong>弹出消息给用户提示添加成功</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153755.png\" alt=\"image-20210825224958220\"></p>\n<p>上图左边就是 elementUI 官网提供的成功提示代码，而上图右边是具体的效果。</p>\n<blockquote>\n<p><mark>注意：上面的 this 需要的是表示 VUE 对象的 this。</mark></p>\n</blockquote>\n</li>\n</ol>\n<p>综上所述，前端代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加数据</span></span><br><span class=\"line\"><span class=\"title function_\">addBrand</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送ajax请求，添加数据</span></span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/addServlet&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>:_this.<span class=\"property\">brand</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resp.<span class=\"property\">data</span> == <span class=\"string\">&quot;success&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//添加成功</span></span><br><span class=\"line\">            <span class=\"comment\">//关闭窗口</span></span><br><span class=\"line\">            _this.<span class=\"property\">dialogVisible</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 重新查询数据</span></span><br><span class=\"line\">            _this.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">            <span class=\"comment\">// 弹出消息提示</span></span><br><span class=\"line\">            _this.$message(&#123;</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;恭喜你，添加成功&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5servlet优化\"><a class=\"markdownIt-Anchor\" href=\"#5servlet优化\">#</a> 5，servlet 优化</h2>\n<h3 id=\"51-问题导入\"><a class=\"markdownIt-Anchor\" href=\"#51-问题导入\">#</a> 5.1  问题导入</h3>\n<p><mark>Web 层的 Servlet 个数太多了，不利于管理和编写</mark></p>\n<p>通过之前的两个功能，我们发现每一个功能都需要定义一个  <code>servlet</code> ，一个模块需要实现增删改查功能，就需要 4 个  <code>servlet</code> ，模块一多就会造成 <code>servlet</code>  泛滥。此时我们就想  <code>servlet</code>  能不能像  <code>service</code>  一样，一个模块只定义一个  <code>servlet</code> ，而每一个功能只需要在该  <code>servlet</code>  中定义对应的方法。例如下面代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/brand/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BrandServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//查询所有</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectAll</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//添加数据</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">     <span class=\"comment\">//修改数据</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除删除</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而我们知道发送请求  <code>servlet</code> ， <code>tomcat</code>  会自动的调用  <code>service()</code>  方法，之前我们在自定义的  <code>servlet</code>  中重写  <code>doGet()</code>  方法和  <code>doPost()</code>  方法，当我们访问该  <code>servlet</code>  时会根据请求方式将请求分发给  <code>doGet()</code>  或者  <code>doPost()</code>   方法，如下图</p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210826184103210.png\" alt=\"image-20210826184103210\" style=\"zoom:80%;\" />\n<p>那么我们也可以仿照这样请求分发的思想，在  <code>service()</code>  方法中根据具体的操作调用对应的方法，如：查询所有就调用  <code>selectAll()</code>  方法，添加企业信息就调用  <code>add()</code>  方法。</p>\n<p>为了做到通用，我们定义一个通用的  <code>servlet</code>  类，在定义其他的  <code>servlet</code>  是不需要继承  <code>HttpServlet</code> ，而继承我们定义的  <code>BaseServlet</code> ，在 <code> BaseServlet</code>  中调用具体  <code>servlet</code> （如 <code>BrandServlet</code> ）中的对应方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//进行请求的分发</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>BrandServlet</code>  定义就需要修改为如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/brand/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BrandServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用户实现分页查询</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectAll</span><span class=\"params\">(...)</span> &#123;&#125; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//添加企业信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//修改企业信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除企业信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(...)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么如何在  <code>BaseServlet</code>  中调用对应的方法呢？比如查询所有就调用  <code>selectAll()</code>  方法。</p>\n<p>可以<mark>规定在发送请求时，请求资源的二级路径（/brandServlet/selectAll）和需要调用的方法名相同</mark>，如：</p>\n<p>查询所有数据的路径以后就需要写成：  <code>http://localhost:8080/brand-case/brandServlet/selectAll</code></p>\n<p>添加数据的路径以后就需要写成：  <code>http://localhost:8080/brand-case/brandServlet/add</code></p>\n<p>修改数据的路径以后就需要写成：  <code>http://localhost:8080/brand-case/brandServlet/update</code></p>\n<p>删除数据的路径以后就需要写成：  <code>http://localhost:8080/brand-case/brandServlet/delete</code></p>\n<p>这样的话，在  <code>BaseServlet</code>  中就需要获取到资源的二级路径作为方法名，然后调用该方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 获取请求路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> req.getRequestURI(); <span class=\"comment\">// 例如路径为：/brand-case/brand/selectAll</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 获取最后一段路径，方法名</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> uri.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> uri.substring(index + <span class=\"number\">1</span>); <span class=\"comment\">//  获取到资源的二级路径  selectAll</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 执行方法</span></span><br><span class=\"line\">        <span class=\"comment\">//2.1 获取BrandServlet /UserServlet 字节码对象 Class</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(this);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseServlet</span>&gt; cls = <span class=\"built_in\">this</span>.getClass();</span><br><span class=\"line\">        <span class=\"comment\">//2.2 获取方法 Method对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> cls.getMethod(methodName,？？？);</span><br><span class=\"line\">            <span class=\"comment\">//4,调用该方法</span></span><br><span class=\"line\">            method.invoke(<span class=\"built_in\">this</span>,？？？);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过上面代码发现根据方法名获取对应方法的  <code>Method</code>  对象时需要指定方法参数的字节码对象。解决这个问题，可以将方法的参数类型规定死，而方法中可能需要用到  <code>request</code>  对象和  <code>response</code>  对象，所以指定方法的参数为  <code>HttpServletRequest</code>  和  <code>HttpServletResponse</code> ，那么  <code>BrandServlet</code>  代码就可以改进为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/brand/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BrandServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用户实现分页查询</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectAll</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//添加企业信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//修改企业信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//删除企业信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BaseServlet 代码可以改进为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据请求的最后一段路径来进行方法分发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 获取请求路径</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> req.getRequestURI(); <span class=\"comment\">// 例如路径为：/brand-case/brand/selectAll</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 获取最后一段路径，方法名</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> uri.lastIndexOf(<span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> uri.substring(index + <span class=\"number\">1</span>); <span class=\"comment\">//  获取到资源的二级路径  selectAll   </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 执行方法</span></span><br><span class=\"line\">        <span class=\"comment\">//2.1 获取BrandServlet /UserServlet 字节码对象 Class</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(this);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseServlet</span>&gt; cls = <span class=\"built_in\">this</span>.getClass();</span><br><span class=\"line\">        <span class=\"comment\">//2.2 获取方法 Method对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;   </span><br><span class=\"line\">            <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class=\"line\">            <span class=\"comment\">//2.3 执行方法</span></span><br><span class=\"line\">            method.invoke(<span class=\"built_in\">this</span>,req,resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"52-代码优化\"><a class=\"markdownIt-Anchor\" href=\"#52-代码优化\">#</a> 5.2  代码优化</h3>\n<h4 id=\"521-后端优化\"><a class=\"markdownIt-Anchor\" href=\"#521-后端优化\">#</a> 5.2.1  后端优化</h4>\n<p>定义了  <code>BaseServlet</code>  后，针对品牌模块我们定义一个  <code>BrandServlet</code>  的 Servlet，并使其继承  <code>BaseServlet</code>  。在 <code>BrandServlet</code>  中定义 以下功能的方法：</p>\n<ul>\n<li><code>查询所有</code>   功能：方法名声明为  <code>selectAll</code>  ，并将之前的  <code>SelectAllServlet</code>  中的逻辑代码拷贝到该方法中</li>\n<li><code>添加数据</code>  功能：方法名声明为  <code>add</code>  ，并将之前的  <code>AddServlet</code>  中的逻辑代码拷贝到该方法中</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/brand/*&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BrandServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseServlet</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">BrandService</span> <span class=\"variable\">brandService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BrandServiceImpl</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectAll</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 调用service查询</span></span><br><span class=\"line\">        List&lt;Brand&gt; brands = brandService.selectAll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 转为JSON</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> JSON.toJSONString(brands);</span><br><span class=\"line\">        <span class=\"comment\">//3. 写数据</span></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;text/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        response.getWriter().write(jsonString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1. 接收品牌数据</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> br.readLine();<span class=\"comment\">//json字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//转为Brand对象</span></span><br><span class=\"line\">        <span class=\"type\">Brand</span> <span class=\"variable\">brand</span> <span class=\"operator\">=</span> JSON.parseObject(params, Brand.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 调用service添加</span></span><br><span class=\"line\">        brandService.add(brand);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3. 响应成功的标识</span></span><br><span class=\"line\">        response.getWriter().write(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"522-前端优化\"><a class=\"markdownIt-Anchor\" href=\"#522-前端优化\">#</a> 5.2.2  前端优化</h4>\n<p>页面中之前发送的请求的路径都需要进行修改， <code>selectAll()</code>  函数中发送异步请求的  <code>url</code>  应该改为  <code>http://localhost:8080/brand-case/brand/selectAll</code>  。具体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询分页数据</span></span><br><span class=\"line\"><span class=\"title function_\">selectAll</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>:<span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectAll&quot;</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">        _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>addBrand()</code>  函数中发送异步请求的  <code>url</code>  应该改为  <code>http://localhost:8080/brand-case/brand/add</code>  。具体代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加数据</span></span><br><span class=\"line\"><span class=\"title function_\">addBrand</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(this.brand);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 发送ajax请求，添加数据</span></span><br><span class=\"line\">    <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/add&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>:_this.<span class=\"property\">brand</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resp.<span class=\"property\">data</span> == <span class=\"string\">&quot;success&quot;</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//添加成功</span></span><br><span class=\"line\">            <span class=\"comment\">//关闭窗口</span></span><br><span class=\"line\">            _this.<span class=\"property\">dialogVisible</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 重新查询数据</span></span><br><span class=\"line\">            _this.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">            <span class=\"comment\">// 弹出消息提示</span></span><br><span class=\"line\">            _this.$message(&#123;</span><br><span class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">&#x27;恭喜你，添加成功&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6批量删除\"><a class=\"markdownIt-Anchor\" href=\"#6批量删除\">#</a> 6，批量删除</h2>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210826185420668.png\" alt=\"image-20210826185420668\" style=\"zoom:70%;\" />\n<p>如上图所示点击多条数据前的复选框就意味着要删除这些数据，而点击了  <code>批量删除</code>  按钮后，需要让用户确认一下，因为有可能是用户误操作的，当用户确定后需要给后端发送请求并携带者需要删除数据的多个 id 值，后端程序删除数据库中的数据。具体的流程如下：</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210826201651241.png\" alt=\"image-20210826201651241\"></p>\n<p><mark>注意：</mark></p>\n<p>前端发送请求时需要将要删除的多个 id 值以 json 格式提交给后端，而该 json 格式数据如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">,</span><span class=\"number\">2</span><span class=\"punctuation\">,</span><span class=\"number\">3</span><span class=\"punctuation\">,</span><span class=\"number\">4</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"61-后端实现\"><a class=\"markdownIt-Anchor\" href=\"#61-后端实现\">#</a> 6.1  后端实现</h3>\n<h4 id=\"611-dao方法实现\"><a class=\"markdownIt-Anchor\" href=\"#611-dao方法实现\">#</a> 6.1.1  dao 方法实现</h4>\n<p>在  <code>BrandMapper</code>  接口中定义  <code>deleteByIds()</code>  添加方法，由于这里面要用到动态 sql ，属于复杂的 sql 操作，建议使用映射配置文件。</p>\n<p>接口方法声明如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ids</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deleteByIds</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;ids&quot;)</span> <span class=\"type\">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>\n<p>在  <code>BrandMapper.xml</code>  映射配置文件中添加 statement</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class=\"line\">    delete from tb_brand where id in</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">&quot;ids&quot;</span> <span class=\"attr\">item</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">separator</span>=<span class=\"string\">&quot;,&quot;</span> <span class=\"attr\">open</span>=<span class=\"string\">&quot;(&quot;</span> <span class=\"attr\">close</span>=<span class=\"string\">&quot;)&quot;</span>&gt;</span></span><br><span class=\"line\">        #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"612-service方法实现\"><a class=\"markdownIt-Anchor\" href=\"#612-service方法实现\">#</a> 6.1.2  service 方法实现</h4>\n<p>在  <code>BrandService</code>  接口中定义  <code>deleteByIds()</code>  批量删除的业务逻辑方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 批量删除</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ids</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">deleteByIds</span><span class=\"params\">( <span class=\"type\">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>\n<p>在  <code>BrandServiceImpl</code>  类中重写  <code>deleteByIds()</code>  方法，并进行业务逻辑实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteByIds</span><span class=\"params\">(<span class=\"type\">int</span>[] ids)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//2. 获取SqlSession对象</span></span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\">    <span class=\"comment\">//3. 获取BrandMapper</span></span><br><span class=\"line\">    <span class=\"type\">BrandMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4. 调用方法</span></span><br><span class=\"line\">    mapper.deleteByIds(ids);</span><br><span class=\"line\"></span><br><span class=\"line\">    sqlSession.commit();<span class=\"comment\">//提交事务</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//5. 释放资源</span></span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"613-servlet实现\"><a class=\"markdownIt-Anchor\" href=\"#613-servlet实现\">#</a> 6.1.3  servlet 实现</h4>\n<p>在  <code>BrandServlet</code>  类中定义  <code>deleteByIds()</code>   方法。而该方法的逻辑如下：</p>\n<ul>\n<li>接收页面提交的数据。页面到时候提交的数据是 json 格式的数据，所以此处需要使用输入流读取数据</li>\n<li>接收页面提交的数据。页面到时候提交的数据是 json 格式的数据，所以此处需要使用输入流读取数据</li>\n<li>将接收到的数据转换为  <code>int[]</code>  数组</li>\n<li>调用 service 的  <code>deleteByIds()</code>  方法进行批量删除的业务逻辑处理</li>\n<li>给浏览器响应添加成功的标识，这里直接给浏览器响应  <code>success</code>  字符串表示成功</li>\n</ul>\n<p>servlet 中  <code>deleteByIds()</code>  方法代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteByIds</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 接收数据 json  [1,2,3]</span></span><br><span class=\"line\">    <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> br.readLine();<span class=\"comment\">//json字符串</span></span><br><span class=\"line\">    <span class=\"comment\">//转为 int[]</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] ids = JSON.parseObject(params, <span class=\"type\">int</span>[].class);</span><br><span class=\"line\">    <span class=\"comment\">//2. 调用service添加</span></span><br><span class=\"line\">    brandService.deleteByIds(ids);</span><br><span class=\"line\">    <span class=\"comment\">//3. 响应成功的标识</span></span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"62-前端实现\"><a class=\"markdownIt-Anchor\" href=\"#62-前端实现\">#</a> 6.2  前端实现</h3>\n<p>此功能的前端代码实现稍微有点麻烦，分为以下几步实现</p>\n<h4 id=\"621-获取选中的id值\"><a class=\"markdownIt-Anchor\" href=\"#621-获取选中的id值\">#</a> 6.2.1  获取选中的 id 值</h4>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153037.png\" alt=\"image-20210826223103884\" style=\"zoom:70%;\" />\n<p>从上图可以看出表格复选框绑定了一个  <code>selection-change</code>  事件，该事件是当选择项发生变化时会触发。该事件绑定了  <code>handleSelectionChange</code>  函数，而该函数有一个参数  <code>val</code>  ，该参数是获取选中行的数据，如下</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153441.png\" alt=\"image-20210826223750518\" style=\"zoom:70%;\" />\n<p>而我们只需要将所有选中数据的 id 值提交给服务端即可，获取 id 的逻辑我们书写在  <code>批量删除</code>  按钮绑定的函数中。</p>\n<p>在  <code>批量删除</code>  按钮绑定单击事件，并给绑定触发时调用的函数，如下</p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210826224121445.png\" alt=\"image-20210826224121445\" style=\"zoom:70%;\" />\n<p>并在 Vue 对象中的 methods 中定义  <code>deleteByIds()</code>  函数，在该函数中从  <code>multipleSelection</code>  数据模型中获取所选数据的 id 值。要完成这个功能需要在 Vue 对象中定义一个数据模型  <code>selectedIds:[]</code> ，在  <code>deleteByIds()</code>  函数中遍历  <code>multipleSelection</code>  数组，并获取到每一个所选数据的 id 值存储到  <code>selectedIds</code>  数组中，代码实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 创建id数组 [1,2,3], 从 this.multipleSelection 获取即可</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">multipleSelection</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> selectionElement = <span class=\"variable language_\">this</span>.<span class=\"property\">multipleSelection</span>[i];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">selectedIds</span>[i] = selectionElement.<span class=\"property\">id</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"622-发送异步请求\"><a class=\"markdownIt-Anchor\" href=\"#622-发送异步请求\">#</a> 6.2.2  发送异步请求</h4>\n<p>使用 axios 发送异步请求并经上一步获取到的存储所有的 id 数组作为请求参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//2. 发送AJAX请求</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送ajax请求，添加数据</span></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/deleteByIds&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:_this.<span class=\"property\">selectedIds</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(resp.<span class=\"property\">data</span> == <span class=\"string\">&quot;success&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//删除成功</span></span><br><span class=\"line\">        <span class=\"comment\">// 重新查询数据</span></span><br><span class=\"line\">        _this.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 弹出消息提示</span></span><br><span class=\"line\">        _this.$message(&#123;</span><br><span class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">&#x27;恭喜你，删除成功&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"623-确定框实现\"><a class=\"markdownIt-Anchor\" href=\"#623-确定框实现\">#</a> 6.2.3  确定框实现</h4>\n<p>由于删除操作是比较危险的；有时候可能是由于用户的误操作点击了  <code>批量删除</code>  按钮，所以在点击了按钮后需要先给用户确认提示。而确认框在  <code>elementUI</code>  中也提供了，如下图</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210826225742852.png\" alt=\"image-20210826225742852\"></p>\n<p>而在点击  <code>确定</code>  按钮后需要执行之前删除的逻辑。因此前端代码实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 批量删除</span></span><br><span class=\"line\"><span class=\"title function_\">deleteByIds</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 弹出确认提示框</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$confirm(<span class=\"string\">&#x27;此操作将删除该数据, 是否继续?&#x27;</span>, <span class=\"string\">&#x27;提示&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">confirmButtonText</span>: <span class=\"string\">&#x27;确定&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">cancelButtonText</span>: <span class=\"string\">&#x27;取消&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;warning&#x27;</span></span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//用户点击确认按钮</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建id数组 [1,2,3], 从 this.multipleSelection 获取即可</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">multipleSelection</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> selectionElement = <span class=\"variable language_\">this</span>.<span class=\"property\">multipleSelection</span>[i];</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">selectedIds</span>[i] = selectionElement.<span class=\"property\">id</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//2. 发送AJAX请求</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 发送ajax请求，添加数据</span></span><br><span class=\"line\">        <span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/deleteByIds&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>:_this.<span class=\"property\">selectedIds</span></span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(resp.<span class=\"property\">data</span> == <span class=\"string\">&quot;success&quot;</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//删除成功</span></span><br><span class=\"line\">                <span class=\"comment\">// 重新查询数据</span></span><br><span class=\"line\">                _this.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">                <span class=\"comment\">// 弹出消息提示</span></span><br><span class=\"line\">                _this.$message(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;恭喜你，删除成功&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//用户点击取消按钮</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.$message(&#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;info&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">&#x27;已取消删除&#x27;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7分页查询\"><a class=\"markdownIt-Anchor\" href=\"#7分页查询\">#</a> 7，分页查询</h2>\n<p>我们之前做的  <code>查询所有</code>  功能中将数据库中所有的数据查询出来并展示到页面上，试想如果数据库中的数据有很多（假设有十几万条）的时候，将数据全部展示出来肯定不现实，那如何解决这个问题呢？几乎所有的网站都会使用分页解决这个问题。每次只展示一页的数据，比如一页展示 10 条数据，如果还想看其他的数据，可以通过点击页码进行查询</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210826230648031.png\" alt=\"image-20210826230648031\"></p>\n<h3 id=\"71-分析\"><a class=\"markdownIt-Anchor\" href=\"#71-分析\">#</a> 7.1  分析</h3>\n<h4 id=\"711-分页查询sql\"><a class=\"markdownIt-Anchor\" href=\"#711-分页查询sql\">#</a> 7.1.1  分页查询 sql</h4>\n<p>分页查询也是从数据库进行查询的，所以我们要分页对应的 SQL 语句应该怎么写。分页查询使用  <code>LIMIT</code>  关键字，格式为：<mark> <code>LIMIT 开始索引 每页显示的条数</code> </mark>。以后前端页面在发送请求携带参数时，它并不明确开始索引是什么，但是它知道查询第几页。所以  <code>开始索引</code>  需要在后端进行计算，计算的公式是 ：<mark>开始索引 = （当前页码 -  1）*  每页显示条数</mark></p>\n<p>比如查询第一页的数据的 SQL 语句是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tb_brand  limit 0,5;</span><br></pre></td></tr></table></figure>\n<p>查询第二页的数据的 SQL 语句是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tb_brand  limit 5,5;</span><br></pre></td></tr></table></figure>\n<p>查询第三页的数据的 SQL 语句是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from tb_brand  limit 10,5;</span><br></pre></td></tr></table></figure>\n<h4 id=\"712-前后端数据分析\"><a class=\"markdownIt-Anchor\" href=\"#712-前后端数据分析\">#</a> 7.1.2  前后端数据分析</h4>\n<p>分页查询功能时候比较复杂的，所以我们要先分析清楚以下两个问题：</p>\n<ul>\n<li>\n<p><strong>前端需要传递什么参数给后端</strong></p>\n<p>根据上一步对分页查询 SQL 语句分析得出，前端需要给后端两个参数</p>\n<ul>\n<li>当前页码 ： currentPage</li>\n<li>每页显示条数：pageSize</li>\n</ul>\n</li>\n<li>\n<p><strong>后端需要响应什么数据给前端</strong></p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153022.png\" alt=\"image-20210826231842293\" style=\"zoom:80%;\" />\n<p>上图是分页查询页面展示的效果，从上面我们可以看出需要响应以下联股份数据</p>\n<ul>\n<li>当前页需要展示的数据。我们在后端一般会存储到 List 集合中</li>\n<li>总共记录数。在上图页面中需要展示总的记录数，所以这部分数据也需要。总的页面 elementUI 的分页组件会自动计算，我们不需要关心</li>\n</ul>\n<p>而这两部分需要封装到 PageBean 对象中，并将该对象转换为 json 格式的数据响应回给浏览器</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153086.png\" alt=\"image-20210826232158234\" style=\"zoom:65%;\" />\n</li>\n</ul>\n<p>通过上面的分析我们需要先在  <code>pojo</code>  包下创建  <code>PageBean</code>  类，为了做到通过会将其定义成泛型类，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分页查询的JavaBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageBean</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> totalCount;</span><br><span class=\"line\">    <span class=\"comment\">// 当前页数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; rows;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTotalCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTotalCount</span><span class=\"params\">(<span class=\"type\">int</span> totalCount)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.totalCount = totalCount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">getRows</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rows;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRows</span><span class=\"params\">(List&lt;T&gt; rows)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rows = rows;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"713-流程分析\"><a class=\"markdownIt-Anchor\" href=\"#713-流程分析\">#</a> 7.1.3  流程分析</h4>\n<p>后端需要响应 <code>总记录数</code>  和  <code>当前页的数据</code>  两部分数据给前端，所以在  <code>BrandMapper</code>   接口中需要定义两个方法：</p>\n<ul>\n<li>selectByPage () ：查询当前页的数据的方法</li>\n<li>selectTotalCount () ：查询总记录的方法</li>\n</ul>\n<p>整体流程如下：</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210826232620404.png\" alt=\"image-20210826232620404\"></p>\n<h3 id=\"72-后端实现\"><a class=\"markdownIt-Anchor\" href=\"#72-后端实现\">#</a> 7.2  后端实现</h3>\n<h4 id=\"721-dao方法实现\"><a class=\"markdownIt-Anchor\" href=\"#721-dao方法实现\">#</a> 7.2.1  dao 方法实现</h4>\n<p>在  <code>BrandMapper</code>  接口中定义  <code>selectByPage()</code>  方法进行分页查询，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> begin</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select * from tb_brand limit #&#123;begin&#125; , #&#123;size&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ResultMap(&quot;brandResultMap&quot;)</span></span><br><span class=\"line\">List&lt;Brand&gt; <span class=\"title function_\">selectByPage</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;begin&quot;)</span> <span class=\"type\">int</span> begin,<span class=\"meta\">@Param(&quot;size&quot;)</span> <span class=\"type\">int</span> size)</span>;</span><br></pre></td></tr></table></figure>\n<p>在  <code>BrandMapper</code>  接口中定义  <code>selectTotalCount()</code>  方法进行统计记录数，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询总记录数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Select(&quot;select count(*) from tb_brand &quot;)</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">selectTotalCount</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"722-service方法实现\"><a class=\"markdownIt-Anchor\" href=\"#722-service方法实现\">#</a> 7.2.2  service 方法实现</h4>\n<p>在  <code>BrandService</code>  接口中定义  <code>selectByPage()</code>  分页查询数据的业务逻辑方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> currentPage  当前页码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageSize   每页展示条数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    PageBean&lt;Brand&gt;  <span class=\"title function_\">selectByPage</span><span class=\"params\">(<span class=\"type\">int</span> currentPage,<span class=\"type\">int</span> pageSize)</span>;</span><br></pre></td></tr></table></figure>\n<p>在  <code>BrandServiceImpl</code>  类中重写  <code>selectByPage()</code>  方法，并进行业务逻辑实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> PageBean&lt;Brand&gt; <span class=\"title function_\">selectByPage</span><span class=\"params\">(<span class=\"type\">int</span> currentPage, <span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//2. 获取SqlSession对象</span></span><br><span class=\"line\">    <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\">    <span class=\"comment\">//3. 获取BrandMapper</span></span><br><span class=\"line\">    <span class=\"type\">BrandMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class=\"line\">    <span class=\"comment\">//4. 计算开始索引</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">begin</span> <span class=\"operator\">=</span> (currentPage - <span class=\"number\">1</span>) * pageSize;</span><br><span class=\"line\">    <span class=\"comment\">// 计算查询条目数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> pageSize;</span><br><span class=\"line\">    <span class=\"comment\">//5. 查询当前页数据</span></span><br><span class=\"line\">    List&lt;Brand&gt; rows = mapper.selectByPage(begin, size);</span><br><span class=\"line\">    <span class=\"comment\">//6. 查询总记录数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">totalCount</span> <span class=\"operator\">=</span> mapper.selectTotalCount();</span><br><span class=\"line\">    <span class=\"comment\">//7. 封装PageBean对象</span></span><br><span class=\"line\">    PageBean&lt;Brand&gt; pageBean = <span class=\"keyword\">new</span> <span class=\"title class_\">PageBean</span>&lt;&gt;();</span><br><span class=\"line\">    pageBean.setRows(rows);</span><br><span class=\"line\">    pageBean.setTotalCount(totalCount);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//8. 释放资源</span></span><br><span class=\"line\">    sqlSession.close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pageBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"723-servlet实现\"><a class=\"markdownIt-Anchor\" href=\"#723-servlet实现\">#</a> 7.2.3  servlet 实现</h4>\n<p>在  <code>BrandServlet</code>  类中定义  <code>selectByPage()</code>   方法。而该方法的逻辑如下：</p>\n<ul>\n<li>获取页面提交的  <code>当前页码</code>  和  <code>每页显示条目数</code>  两个数据。这两个参数是在 url 后进行拼接的，格式是   <code>url?currentPage=1&amp;pageSize=5</code> 。获取这样的参数需要使用  <code>requet.getparameter()</code>  方法获取。</li>\n<li>调用 service 的  <code>selectByPage()</code>  方法进行分页查询的业务逻辑处理</li>\n<li>将查询到的数据转换为 json 格式的数据</li>\n<li>响应 json 数据</li>\n</ul>\n<p>servlet 中  <code>selectByPage()</code>  方法代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectByPage</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 接收 当前页码 和 每页展示条数    url?currentPage=1&amp;pageSize=5</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">_currentPage</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;currentPage&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">_pageSize</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;pageSize&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">currentPage</span> <span class=\"operator\">=</span> Integer.parseInt(_currentPage);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageSize</span> <span class=\"operator\">=</span> Integer.parseInt(_pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 调用service查询</span></span><br><span class=\"line\">    PageBean&lt;Brand&gt; pageBean = brandService.selectByPage(currentPage, pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 转为JSON</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> JSON.toJSONString(pageBean);</span><br><span class=\"line\">    <span class=\"comment\">//3. 写数据</span></span><br><span class=\"line\">    response.setContentType(<span class=\"string\">&quot;text/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">    response.getWriter().write(jsonString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"724-测试\"><a class=\"markdownIt-Anchor\" href=\"#724-测试\">#</a> 7.2.4  测试</h4>\n<p>在浏览器上地址栏输入  <code>http://localhost:8080/brand-case/brand/selectByPage?currentPage=1&amp;pageSize=5</code>  ，查询到以下数据</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210828184610060.png\" alt=\"image-20210828184610060\"></p>\n<h3 id=\"73-前端实现\"><a class=\"markdownIt-Anchor\" href=\"#73-前端实现\">#</a> 7.3  前端实现</h3>\n<h4 id=\"731-selectall-代码改进\"><a class=\"markdownIt-Anchor\" href=\"#731-selectall-代码改进\">#</a> 7.3.1  selectAll 代码改进</h4>\n<p><code>selectAll()</code>  函数之前是查询所有数据，现需要改成分页查询。 请求路径应改为  <code>http://localhost:8080/brand-case/brand/selectByPage?currentPage=1&amp;pageSize=5</code>  ，而  <code>currentPage</code>   和  <code>pageSize</code>   是需要携带的参数，分别是 当前页码 和 每页显示的条目数。</p>\n<p>刚才我们对后端代码进行测试可以看出响应回来的数据，所以在异步请求的成功回调函数（ <code>then</code>  中的匿名函数）中给页面表格的数据模型赋值  <code>_this.tableData = resp.data.rows;</code> 。整体代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectByPage？currentPage=1&amp;pageSize=5&quot;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置表格数据</span></span><br><span class=\"line\">    _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">rows</span>; <span class=\"comment\">// &#123;rows:[],totalCount:100&#125;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>响应的数据中还有总记录数，要进行总记录数展示需要在页面绑定数据模型</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153610.png\" alt=\"image-20210828185553407\" style=\"zoom:70%;\" />\n<blockquote>\n<p><mark>注意：该数据模型需要在 Vue 对象中声明出来。</mark></p>\n</blockquote>\n<p>那异步请求的代码就可以优化为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectByPage?currentPage=1&amp;pageSize=5&quot;</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置表格数据</span></span><br><span class=\"line\">    _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">rows</span>; <span class=\"comment\">// &#123;rows:[],totalCount:100&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//设置总记录数</span></span><br><span class=\"line\">    _this.<span class=\"property\">totalCount</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">totalCount</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>而页面中分页组件给  <code>当前页码</code>  和  <code>每页显示的条目数</code>  都绑定了数据模型</p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210828191752872.png\" alt=\"image-20210828191752872\" style=\"zoom:80%;\" />\n<p>所以  <code>selectAll()</code>  函数中发送异步请求的资源路径中不能将当前页码和 每页显示条目数写死，代码就可以优化为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectByPage?currentPage=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">currentPage</span>+<span class=\"string\">&quot;&amp;pageSize=&quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">pageSize</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置表格数据</span></span><br><span class=\"line\">    _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">rows</span>; <span class=\"comment\">// &#123;rows:[],totalCount:100&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//设置总记录数</span></span><br><span class=\"line\">    _this.<span class=\"property\">totalCount</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">totalCount</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"732-改变每页条目数\"><a class=\"markdownIt-Anchor\" href=\"#732-改变每页条目数\">#</a> 7.3.2  改变每页条目数</h4>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153822.png\" alt=\"image-20210828192937340\" style=\"zoom:80%;\" />\n<p>当我们改变每页显示的条目数后，需要重新发送异步请求。而下图是分页组件代码， <code>@size-change</code>  就是每页显示的条目数发生变化时会触发的事件</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153199.png\" alt=\"image-20210828193143116\" style=\"zoom:80%;\" />\n<p>而该事件绑定了一个  <code>handleSizeChange</code>  函数，整个逻辑如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleSizeChange</span>(<span class=\"params\">val</span>) &#123; <span class=\"comment\">//我们选择的是 ‘5条/页’ 此值就是 5.而我们选择了 `10条/页` 此值就是 10</span></span><br><span class=\"line\">    <span class=\"comment\">// 重新设置每页显示的条数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pageSize</span>  = val; </span><br><span class=\"line\">    <span class=\"comment\">//调用 selectAll 函数重新分页查询数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"733-改变当前页码\"><a class=\"markdownIt-Anchor\" href=\"#733-改变当前页码\">#</a> 7.3.3  改变当前页码</h4>\n<p>当我们改变页码时，需要重新发送异步请求。而下图是分页组件代码， <code>@current-change</code>  就是页码发生变化时会触发的事件</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153498.png\" alt=\"image-20210828193713913\" style=\"zoom:80%;\" />\n<p>而该事件绑定了一个  <code>handleSizeChange</code>  函数，整个逻辑如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleCurrentChange</span>(<span class=\"params\">val</span>) &#123; <span class=\"comment\">//val 就是改变后的页码</span></span><br><span class=\"line\">    <span class=\"comment\">// 重新设置当前页码</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">currentPage</span>  = val;</span><br><span class=\"line\">    <span class=\"comment\">//调用 selectAll 函数重新分页查询数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">selectAll</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8条件查询\"><a class=\"markdownIt-Anchor\" href=\"#8条件查询\">#</a> 8，条件查询</h2>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153505.png\" alt=\"image-20210828212019663\" style=\"zoom:60%;\" />\n<p>上图就是用来输入条件查询的条件数据的。要做条件查询功能，先明确以下三个问题</p>\n<ul>\n<li>\n<p>3 个条件之间什么关系？</p>\n<p>同时满足，所用 SQL 中多个条件需要使用 and 关键字连接</p>\n</li>\n<li>\n<p>3 个条件必须全部填写吗？</p>\n<p>不需要。想根据哪儿个条件查询就写那个，所以这里需要使用动态 sql 语句</p>\n</li>\n<li>\n<p>条件查询需要分页吗？</p>\n<p>需要</p>\n</li>\n</ul>\n<p>根据上面三个问题的明确，我们就可以确定 sql 语句了：</p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210828213116559.png\" alt=\"image-20210828213116559\" style=\"zoom:70%;\" /> \n<p>整个条件分页查询流程如下</p>\n<p><img data-src=\"../../../../../%E7%BD%91%E4%B8%8A%E5%80%9F%E5%8A%A9%E8%B5%84%E6%96%99/JavaWeb/ITheima--JAVAWEB/day14-%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/ppt/assets/image-20210828224859135.png\" alt=\"image-20210828224859135\"></p>\n<h3 id=\"81-后端实现\"><a class=\"markdownIt-Anchor\" href=\"#81-后端实现\">#</a> 8.1  后端实现</h3>\n<h4 id=\"811-dao实现\"><a class=\"markdownIt-Anchor\" href=\"#811-dao实现\">#</a> 8.1.1  dao 实现</h4>\n<p>在  <code>BrandMapper</code>  接口中定义  <code>selectByPageAndCondition()</code>  方法 和  <code>selectTotalCountByCondition</code>  方法，用来进行条件分页查询功能，方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页条件查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> begin</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> size</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">List&lt;Brand&gt; <span class=\"title function_\">selectByPageAndCondition</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;begin&quot;)</span> <span class=\"type\">int</span> begin,<span class=\"meta\">@Param(&quot;size&quot;)</span> <span class=\"type\">int</span> size,<span class=\"meta\">@Param(&quot;brand&quot;)</span> Brand brand)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据条件查询总记录数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">selectTotalCountByCondition</span><span class=\"params\">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>\n<p>参数：</p>\n<ul>\n<li><code>begin</code>  分页查询的起始索引</li>\n<li><code>size</code>  分页查询的每页条目数</li>\n<li><code>brand</code>  用来封装条件的对象</li>\n</ul>\n<p>由于这是一个复杂的查询语句，需要使用动态 sql；所以我们在映射配置文件中书写 sql 语句。 <code>brand_name</code>  字段和  <code>company_name</code>  字段需要进行模糊查询，所以需要使用  <code>%</code>  占位符。映射配置文件中 statement 书写如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--查询满足条件的数据并进行分页--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectByPageAndCondition&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class=\"line\">    select *</span><br><span class=\"line\">    from tb_brand</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;brand.brandName != null and brand.brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class=\"line\">            and  brand_name like #&#123;brand.brandName&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;brand.companyName != null and brand.companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class=\"line\">            and  company_name like #&#123;brand.companyName&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;brand.status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and  status = #&#123;brand.status&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    limit #&#123;begin&#125; , #&#123;size&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--查询满足条件的数据条目数--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;selectTotalCountByCondition&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class=\"line\">    select count(*)</span><br><span class=\"line\">    from tb_brand</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class=\"line\">            and  brand_name like #&#123;brandName&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class=\"line\">            and  company_name like #&#123;companyName&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">&quot;status != null&quot;</span>&gt;</span></span><br><span class=\"line\">            and  status = #&#123;status&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"812-service实现\"><a class=\"markdownIt-Anchor\" href=\"#812-service实现\">#</a> 8.1.2  service 实现</h4>\n<p>在  <code>BrandService</code>  接口中定义  <code>selectByPageAndCondition()</code>  分页查询数据的业务逻辑方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页条件查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> currentPage</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pageSize</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> brand</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">PageBean&lt;Brand&gt;  <span class=\"title function_\">selectByPageAndCondition</span><span class=\"params\">(<span class=\"type\">int</span> currentPage,<span class=\"type\">int</span> pageSize,Brand brand)</span>;</span><br></pre></td></tr></table></figure>\n<p>在  <code>BrandServiceImpl</code>  类中重写  <code>selectByPageAndCondition()</code>  方法，并进行业务逻辑实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> PageBean&lt;Brand&gt; <span class=\"title function_\">selectByPageAndCondition</span><span class=\"params\">(<span class=\"type\">int</span> currentPage, <span class=\"type\">int</span> pageSize, Brand brand)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//2. 获取SqlSession对象</span></span><br><span class=\"line\">       <span class=\"type\">SqlSession</span> <span class=\"variable\">sqlSession</span> <span class=\"operator\">=</span> factory.openSession();</span><br><span class=\"line\">       <span class=\"comment\">//3. 获取BrandMapper</span></span><br><span class=\"line\">       <span class=\"type\">BrandMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//4. 计算开始索引</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">begin</span> <span class=\"operator\">=</span> (currentPage - <span class=\"number\">1</span>) * pageSize;</span><br><span class=\"line\">       <span class=\"comment\">// 计算查询条目数</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> pageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 处理brand条件，模糊表达式</span></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">brandName</span> <span class=\"operator\">=</span> brand.getBrandName();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (brandName != <span class=\"literal\">null</span> &amp;&amp; brandName.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           brand.setBrandName(<span class=\"string\">&quot;%&quot;</span> + brandName + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">String</span> <span class=\"variable\">companyName</span> <span class=\"operator\">=</span> brand.getCompanyName();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (companyName != <span class=\"literal\">null</span> &amp;&amp; companyName.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           brand.setCompanyName(<span class=\"string\">&quot;%&quot;</span> + companyName + <span class=\"string\">&quot;%&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//5. 查询当前页数据</span></span><br><span class=\"line\">       List&lt;Brand&gt; rows = mapper.selectByPageAndCondition(begin, size, brand);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//6. 查询总记录数</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">totalCount</span> <span class=\"operator\">=</span> mapper.selectTotalCountByCondition(brand);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//7. 封装PageBean对象</span></span><br><span class=\"line\">       PageBean&lt;Brand&gt; pageBean = <span class=\"keyword\">new</span> <span class=\"title class_\">PageBean</span>&lt;&gt;();</span><br><span class=\"line\">       pageBean.setRows(rows);</span><br><span class=\"line\">       pageBean.setTotalCount(totalCount);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//8. 释放资源</span></span><br><span class=\"line\">       sqlSession.close();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> pageBean;</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><mark>注意：brandName 和 companyName 属性值到时候需要进行模糊查询，所以前后需要拼接上  <code>%</code> </mark>。</p>\n</blockquote>\n<h4 id=\"813-servlet实现\"><a class=\"markdownIt-Anchor\" href=\"#813-servlet实现\">#</a> 8.1.3  servlet 实现</h4>\n<p>在  <code>BrandServlet</code>  类中定义  <code>selectByPageAndCondition()</code>   方法。而该方法的逻辑如下：</p>\n<ul>\n<li>\n<p>获取页面提交的  <code>当前页码</code>  和  <code>每页显示条目数</code>  两个数据。这两个参数是在 url 后进行拼接的，格式是   <code>url?currentPage=1&amp;pageSize=5</code> 。获取这样的参数需要使用  <code>requet.getparameter()</code>  方法获取。</p>\n</li>\n<li>\n<p>获取页面提交的  <code>条件数据</code>  ，并将数据封装到一个 Brand 对象中。由于这部分数据到时候是需要以 json 格式进行提交的，所以我们需要通过流获取数据，具体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取查询条件对象</span></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> br.readLine();<span class=\"comment\">//json字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转为 Brand</span></span><br><span class=\"line\"><span class=\"type\">Brand</span> <span class=\"variable\">brand</span> <span class=\"operator\">=</span> JSON.parseObject(params, Brand.class);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调用 service 的  <code>selectByPageAndCondition()</code>  方法进行分页查询的业务逻辑处理</p>\n</li>\n<li>\n<p>将查询到的数据转换为 json 格式的数据</p>\n</li>\n<li>\n<p>响应 json 数据</p>\n</li>\n</ul>\n<p>servlet 中  <code>selectByPageAndCondition()</code>  方法代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 分页条件查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectByPageAndCondition</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 接收 当前页码 和 每页展示条数    url?currentPage=1&amp;pageSize=5</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">_currentPage</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;currentPage&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">_pageSize</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;pageSize&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">currentPage</span> <span class=\"operator\">=</span> Integer.parseInt(_currentPage);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pageSize</span> <span class=\"operator\">=</span> Integer.parseInt(_pageSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取查询条件对象</span></span><br><span class=\"line\">    <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> request.getReader();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">params</span> <span class=\"operator\">=</span> br.readLine();<span class=\"comment\">//json字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转为 Brand</span></span><br><span class=\"line\">    <span class=\"type\">Brand</span> <span class=\"variable\">brand</span> <span class=\"operator\">=</span> JSON.parseObject(params, Brand.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 调用service查询</span></span><br><span class=\"line\">    PageBean&lt;Brand&gt; pageBean = brandService.selectByPageAndCondition(currentPage,pageSize,brand);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 转为JSON</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">jsonString</span> <span class=\"operator\">=</span> JSON.toJSONString(pageBean);</span><br><span class=\"line\">    <span class=\"comment\">//3. 写数据</span></span><br><span class=\"line\">    response.setContentType(<span class=\"string\">&quot;text/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">    response.getWriter().write(jsonString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"82-前端实现\"><a class=\"markdownIt-Anchor\" href=\"#82-前端实现\">#</a> 8.2  前端实现</h3>\n<p>前端代码我们从以下几方面实现：</p>\n<ol>\n<li>\n<p><strong>查询表单绑定查询条件对象模型</strong></p>\n<p>这一步在页面上已经实现了，页面代码如下：</p>\n<img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212151153943.png\" alt=\"image-20210828223817324\" style=\"zoom:70%;\" />\n</li>\n<li>\n<p><strong>点击查询按钮查询数据</strong></p>\n<img data-src=\"../../../../../网上借助资料/JavaWeb/ITheima--JAVAWEB/day14-综合案例/ppt/assets/image-20210828223952142.png\" alt=\"image-20210828223952142\" style=\"zoom:67%;\" />\n<p>从上面页面可以看到给  <code>查询</code>  按钮绑定了  <code>onSubmit()</code>  函数，而在  <code>onSubmit()</code>  函数中只需要调用  <code>selectAll()</code>  函数进行条件分页查询。</p>\n</li>\n<li>\n<p><strong>改进 selectAll () 函数</strong></p>\n<p>子页面加载完成后发送异步请求，需要携带当前页码、每页显示条数、查询条件对象。接下来先对携带的数据进行说明：</p>\n<ul>\n<li><code>当前页码</code>  和  <code>每页显示条数</code>  这两个参数我们会拼接到 URL 的后面</li>\n<li><code>查询条件对象</code>  这个参数需要以 json 格式提交给后端程序</li>\n</ul>\n<p>修改  <code>selectAll()</code>  函数逻辑为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectByPageAndCondition?currentPage=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">currentPage</span>+<span class=\"string\">&quot;&amp;pageSize=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">pageSize</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">brand</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置表格数据</span></span><br><span class=\"line\">    _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">rows</span>; <span class=\"comment\">// &#123;rows:[],totalCount:100&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//设置总记录数</span></span><br><span class=\"line\">    _this.<span class=\"property\">totalCount</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">totalCount</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"9前端代码优化\"><a class=\"markdownIt-Anchor\" href=\"#9前端代码优化\">#</a> 9，前端代码优化</h2>\n<p>咱们已经将所有的功能实现完毕。而针对前端代码中的发送异步请求的代码，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _this = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectByPageAndCondition?currentPage=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">currentPage</span>+<span class=\"string\">&quot;&amp;pageSize=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">pageSize</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">brand</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resp</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置表格数据</span></span><br><span class=\"line\">    _this.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">rows</span>; <span class=\"comment\">// &#123;rows:[],totalCount:100&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//设置总记录数</span></span><br><span class=\"line\">    _this.<span class=\"property\">totalCount</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">totalCount</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>需要在成功的回调函数（也就是 <code>then</code>  函数中的匿名函数）中使用 this，都需要在外边使用  <code>_this</code>  记录一下  <code>this</code>  所指向的对象；因为在外边的  <code>this</code>  表示的是 Vue 对象，而回调函数中的  <code>this</code>  表示的不是 vue 对象。这里我们可以使用  <code>ECMAScript6</code>  中的新语法（箭头函数）来简化这部分代码，如上面的代码可以简化为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;http://localhost:8080/brand-case/brand/selectByPageAndCondition?currentPage=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">currentPage</span>+<span class=\"string\">&quot;&amp;pageSize=&quot;</span>+<span class=\"variable language_\">this</span>.<span class=\"property\">pageSize</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">brand</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置表格数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tableData</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">rows</span>; <span class=\"comment\">// &#123;rows:[],totalCount:100&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//设置总记录数</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">totalCount</span> = resp.<span class=\"property\">data</span>.<span class=\"property\">totalCount</span>;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>箭头函数语法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(参数) =&gt; &#123;</span><br><span class=\"line\">\t逻辑代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>箭头函数的作用：</strong></p>\n<p>替换（简化）匿名函数。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/computer-science/java/course-1/%E7%AC%AC%E4%B8%80%E5%91%A8%E8%AE%A1%E7%AE%97/",
            "url": "http://example.com/computer-science/java/course-1/%E7%AC%AC%E4%B8%80%E5%91%A8%E8%AE%A1%E7%AE%97/",
            "title": "SpringBoot",
            "date_published": "2022-12-15T03:41:56.000Z",
            "content_html": "<h1 align=\"center\">SpringBoot</h1>\n<p>点解要学</p>\n<ul>\n<li>\n<p>Spring 技术是 JavaEE 开发的必备技能，企业开发技术选型命中率 &gt; 90%</p>\n</li>\n<li>\n<p>专业角度</p>\n</li>\n</ul>\n<p>用来简化开发，降低企业级开发的复杂性</p>\n<p>框架整合，高效整合其他技术，以提高企业级应用程序开发与运行效率</p>\n<ul>\n<li>简化开发</li>\n</ul>\n<p>IOC</p>\n<p>AOP</p>\n<ul>\n<li>​\t\t\t事务处理</li>\n</ul>\n<p>框架整合</p>\n<ul>\n<li>MyBaties</li>\n<li>mybatis-plus</li>\n<li>Struts</li>\n<li>Struts2</li>\n<li>Hibernate</li>\n</ul>\n<p>怎么学习</p>\n<ul>\n<li>学习 spring 框架的设计思想</li>\n<li>学习基础操作，思考操作与思想之间的联系</li>\n<li>学习案例，熟练应用操作的同时，体验思想</li>\n</ul>\n<p>初识 spring</p>\n<p>了解 spring 家族 (Spring 全家桶)</p>\n<p>发展史 (Spring 5.0)</p>\n<h1 id=\"spring-framework系统架构\"><a class=\"markdownIt-Anchor\" href=\"#spring-framework系统架构\">#</a> spring framework 系统架构</h1>\n<ul>\n<li>Spring Framework 是 spring 生态圈中最基础的项目，是其他项目的根基。</li>\n</ul>\n<p>(1) 核心层</p>\n<ul>\n<li>Core Container：核心容器，这个模块是 spring 最核心的模块，其他的都需要依赖该模块。</li>\n</ul>\n<p>(2) AOP 层</p>\n<ul>\n<li>AOP：面向切面编程，它依赖的是核心层容器，目的是 == 在不改变原有代码的前提下对其进行功能的增加。</li>\n</ul>\n<p>(3) Aspects:AOP 是思想，Aspects 是对其 AOP 思想的具体实现</p>\n<p>(3) 数据层</p>\n<ul>\n<li>Data Access: 数据访问层，Spring 全家桶中有对数据访问的具体实现技术</li>\n<li>Data Integration: 数据集成，Spring 支持整合其他的数据层解决方案，比如 Mybatis</li>\n<li>Transaction: 事务，spring 中事务管理是 spring AOP 的一个具体实现，是一个重点。</li>\n</ul>\n<p>(4) Web 层</p>\n<ul>\n<li>这一层的内容将在 springMVC 框架中具体学习</li>\n</ul>\n<p>(5) Test 层</p>\n<ul>\n<li>Spring 主要整合了 Junit 来完成单元测试和集成测试</li>\n</ul>\n<p>Spirng 核心概念内容中主要包含 IOC/DI、IOC 容器和 Bean。</p>\n<p>(1) 业务层需要调用数据层的方法，就需要在业务层 new 数据层的对象</p>\n<p>(2) 如果数据层的实现类发生变化，那么业务层的代码也需要跟着改变，发生变更后，都需要进行编译打包和重部署</p>\n<p>(3) 所以代码在编写的过程中存在的问题是：<mark>耦合度偏高</mark></p>\n<p>如何解决呢</p>\n<p><img data-src=\"java-SSM.assets/1629724206002.png\" alt=\"1629724206002\"></p>\n<p>所以现在的问题就是，业务层不想 new 对象，运行的时候又需要这个对象，该咋办呢</p>\n<p>针对这个问题，Spring 就提出了一个解决方案:</p>\n<ul>\n<li>就是在适用对象的时候，在程序中不要主动使用 new 产生对象，转换为由外部提供对象</li>\n</ul>\n<p>这种实现的思想就是 spring 的一个核心的概念</p>\n<h2 id=\"1-ioc-ioc容器-bran-di\"><a class=\"markdownIt-Anchor\" href=\"#1-ioc-ioc容器-bran-di\">#</a> 1 IOC、IOC 容器、Bran、DI</h2>\n<ol>\n<li>IOD (Inversion of Control) 控制反转</li>\n</ol>\n<p>(1) 什么是控制反转？</p>\n<ul>\n<li>使用对象的时候，由主动 new 产生对象转换为由外部提供了对象，此过程就是对象创建控制权由程序转移到外部，这个思想就是控制反转。</li>\n</ul>\n<p>(2) Spring 和 IOC 之间的关系是啥？</p>\n<ul>\n<li>Spring 技术对 IOC 思想进行了实现</li>\n<li>spring 提供了一个容器，称为 IOC 容器，用来充当 IOC 思想中的 “外部”</li>\n<li>IOC 思想中的别人 [外部] 指的就是 spring 中的 IOC 容器</li>\n</ul>\n<p>(3) IOC 容器的作用以及内部存放的是什么？</p>\n<ul>\n<li>IOC 容器负责的就是对象的创建、初始化等一系列工作，其中就包含了数据层业务层的对象。</li>\n<li>别创建或被管理的对象在 IOC 容器中统称为 Bean</li>\n<li>IOC 容器中放的就是一个个的 Bean 对象</li>\n</ul>\n<p>(4) 当 IOC 容器中创建好 service 和 dao 对象之后，程序能正确执行吗？</p>\n<ul>\n<li>不行，因为 service 运行徐娅以来 dao 对象</li>\n<li>IOC 容器中虽然 service 和 dao 对象没有任何关系</li>\n<li>需要把 dao 对象交给 service，也就是说要绑定 service 和 dao 对象之间的关系</li>\n</ul>\n<p>像这种在容器中建立对像与对象之间的绑定关系就要用到 DI：</p>\n<ol start=\"2\">\n<li>DI 依赖注入</li>\n</ol>\n<p>(1) 什么是依赖注入呢？</p>\n<ul>\n<li>在容器中建立 bean 与 bean 之间的依赖关系的整个过程，称为依赖注入</li>\n</ul>\n<p>业务层要用到数据层的类对象，以前都是自己 new 的</p>\n<p>现在要靠别人 [外部指的就是 IOC 容器] 来注入进来</p>\n<p>(2) IOC 容器中哪一些 bean 之间需要建立依赖关系呢？</p>\n<ul>\n<li>这个需要程序员根据业务需求提前建立好关系，如业务层需要依赖数据层，service 就要和 dao 建立依赖关系</li>\n</ul>\n<h3 id=\"ioc入门案例的实现\"><a class=\"markdownIt-Anchor\" href=\"#ioc入门案例的实现\">#</a> IOC 入门案例的实现</h3>\n<p><strong>添加案例中需要的类：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">BookDao</span> <span class=\"variable\">bookDao</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BookDaoImpl</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 resource 下添加 spring 配置文件 applicationContext.xml，并完成 bean 的配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;beans xmlns=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"line\">       xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">       xsi:schemaLocation=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &lt;!--bean标签标示配置bean</span><br><span class=\"line\">    \tid属性标示给bean起名字</span><br><span class=\"line\">    \tclass属性表示给bean定义类型</span><br><span class=\"line\">\t--&gt;</span><br><span class=\"line\">\t&lt;bean id=<span class=\"string\">&quot;bookDao&quot;</span> class=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class=\"line\">    &lt;bean id=<span class=\"string\">&quot;bookService&quot;</span> class=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<p>获取 IOC 容器🚿</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取IOC容器</span></span><br><span class=\"line\">        ApplicationContext context=<span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">BookDao</span> <span class=\"variable\">bookDao</span> <span class=\"operator\">=</span> (BookDao) context.getBean(<span class=\"string\">&quot;bookDao&quot;</span>);</span><br><span class=\"line\">        BookService bookService= (BookService) context.getBean(<span class=\"string\">&quot;bookService&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">        bookService.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DI 入门案例</p>\n<blockquote>\n<p>需求：基于 IOC 入门案例，在 BookServiceImpl 类中删除 new 对象的方式，使用 Spring 的 DI 完成 Dao 层的注入</p>\n<p>1. 删除业务层中使用 new 的方式创建的 dao 对象</p>\n<p>2. 在业务层提供 BookDao 的 setter 方法</p>\n<p>3. 在配置文件中添加依赖注入的配置 (property)</p>\n<p>4. 运行程序调用方法</p>\n</blockquote>\n<h3 id=\"ioc相关的内容\"><a class=\"markdownIt-Anchor\" href=\"#ioc相关的内容\">#</a> IOC 相关的内容</h3>\n<p>bean 基础配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>bean 的 name 属性</p>\n<p>配置别名</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span>    以空格or,or;分隔开来，作用效果跟id一样</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-bean作用范围scope配置\"><a class=\"markdownIt-Anchor\" href=\"#2-bean作用范围scope配置\">#</a> 2 bean 作用范围 scope 配置</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scope=&quot;prototype&quot;  这个就是非单例的</span><br><span class=\"line\">scope=&quot;singleton&quot;  这个就是单例的</span><br></pre></td></tr></table></figure>\n<p>在默认的情况之下，spring 创建的 bean 对象都是单例的</p>\n<h3 id=\"scope使用的感受\"><a class=\"markdownIt-Anchor\" href=\"#scope使用的感受\">#</a> scope 使用的感受</h3>\n<p>为什么 bean 默认的情况之下都是为单例的呢？</p>\n<ul>\n<li>\n<p>bean 为单例的意思就是说在 spring 的 IOC 容器中只会有该类的一个对象</p>\n</li>\n<li>\n<p>bean 对象只有一个就避免了对象的频繁创建跟销毁，达到了 bean 对象的复用，性能高。</p>\n</li>\n</ul>\n<p>bean 在容器中是单例的话，会不会产生线程安全问题？</p>\n<ul>\n<li>如果对象是有状态的对象，即该对象中有成员变量用来存储数据的。因为所有的请求共用一个 bean 对象，所以会存在线程安全问题。</li>\n<li>如果对象是无状态的，即该对象没有成员变量没有进行数据存储的，因为方法中的局部变量在方法调用之后会被销毁，所以不会存在线程安全问题</li>\n</ul>\n<p>哪些 bean 对象适合交给容器来进行管理</p>\n<ul>\n<li>表现层对象</li>\n<li>业务层对象</li>\n<li>数据层对象</li>\n<li>工具对象</li>\n</ul>\n<p>哪些 bean 对象不适合交给容器来进行管理</p>\n<ul>\n<li>封装是里的域对象，因为会引发线程安全问题，所以不适合。</li>\n</ul>\n<p>bean 基础配置的小结</p>\n<p>关于 bean 的基础配置中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bean的唯一标识&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">class</span>=<span class=\"string\">&quot;bean的类全名&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">scope</span>=<span class=\"string\">&quot;bean的作用范围,有singleton(默认)和propertype&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">name</span>=<span class=\"string\">&quot;为wean取得别名&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&quot;&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-bean的实例化\"><a class=\"markdownIt-Anchor\" href=\"#3-bean的实例化\">#</a> 3 bean 的实例化</h2>\n<p>实例化的三种方法，构造方法，静态方法和实例工厂</p>\n<p>bean 本质上就是对象，对象在 new 的时候会使用构造方法完成，那么创建 bean 也是使用构造方法来完成的。</p>\n<p>将 BookDaoImpl 中的构造方法设置为 private</p>\n<p>并且在里面打印一句话来测试</p>\n<p>能执行成功，说明内部走的依旧是构造函数，能够访问类中的私有构造方法，显而易见 spring 底层用的就是反射。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BookDaoImpl</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n<p>构造函数中添加一个参数测试</p>\n<p>程序会报错，说明 spring 底层使用的是类的无参构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">BookDaoImpl</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析 spring 的错误信息</p>\n<p>spring 的报错信息来学一学如阅读。</p>\n<ul>\n<li>错误信息从下往上来查看，因为上面的错误大都是西面错误的一个包装，最核心错误是在最下面</li>\n</ul>\n<h3 id=\"静态工厂实例化\"><a class=\"markdownIt-Anchor\" href=\"#静态工厂实例化\">#</a> 静态工厂实例化</h3>\n<p>(1) 准备一个 OrderDao 和 OrderDaoImpl 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OrderDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OrderDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;order dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 创建一个工厂类 OrderDaoFactory 并提供一个静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//静态工厂创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderDaoFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> OrderDao <span class=\"title function_\">getOrderDao</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderDaoImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 编写 AppForInstanceOrder 运行类，在类中创建工厂来获取对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppForInstanceOrder</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过静态工厂创建对象</span></span><br><span class=\"line\">        <span class=\"type\">OrderDao</span> <span class=\"variable\">orderDao</span> <span class=\"operator\">=</span> OrderDaoFactory.getOrderDao();</span><br><span class=\"line\">        orderDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(1) 交给 spring 来进行管理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;orderDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.factory.OrderDaoFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>(2) 在 AppForInstanceOrder 运行类，使用从 IOC 容器中获取 bean 的方法进行运行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppForInstanceOrder</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        ApplicationContext ctx=<span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathxmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">OrderDao</span> <span class=\"variable\">orderDao</span> <span class=\"operator\">=</span> (OrderDao) ctx.getBean(<span class=\"string\">&quot;orderDao&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        orderDao.save();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>静态工厂的方式反而更加复杂</li>\n</ul>\n<p>主要的原因就是：</p>\n<ul>\n<li>在工厂的静态方法中，我们除了 new 对象之外还可以做其他的一些业务操作，这些操作必不可少，如：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderDaoFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> OrderDao <span class=\"title function_\">getOrderDao</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;factory setup....&quot;</span>);<span class=\"comment\">//模拟必要的业务操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderDaoImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><mark>静态工厂以了解为主</mark></p>\n<p>实例化工厂与 FactoryBean</p>\n<p>前面的三个类擦不多都是一样的，只要把其中的静态方法改编成为普通的方法就行了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppForInstanceUser</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建实例工厂对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDaoFactory</span> <span class=\"variable\">userDaoFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDaoFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//通过实例工厂对象创建对象</span></span><br><span class=\"line\">        <span class=\"type\">UserDao</span> <span class=\"variable\">userDao</span> <span class=\"operator\">=</span> userDaoFactory.getUserDao();</span><br><span class=\"line\">        userDao.save();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来就是交给 spring 来管理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userFactory&quot;</span> <span class=\"attr\">calss</span>=<span class=\"string\">&quot;com.ityueheng.foctory.UserDaoFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getUserDao&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;UserFactory&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>实例化工厂运行的顺序就是：</p>\n<ul>\n<li>\n<p>创建实例化工厂对象，对应的第一行配置</p>\n</li>\n<li>\n<p>调用对象中的方法来创建 bean，对应的是第二行配置</p>\n</li>\n</ul>\n<p>factory-bean：工厂的实例化对象</p>\n<p>factory-method：工厂对象中的具体创建对象的方法名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppForInstanceUser</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> </span><br><span class=\"line\">            <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">UserDao</span> <span class=\"variable\">userDao</span> <span class=\"operator\">=</span> (UserDao) ctx.getBean(<span class=\"string\">&quot;userDao&quot;</span>);</span><br><span class=\"line\">        userDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FactoryBean 的使用</p>\n<p>具体的使用步骤为：</p>\n<p>1）创建一个 UserDaoFactoryBean 的类，实现 FactoryBean 接口，重写接口中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代替原始实例工厂中创建对象的方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDao <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDaoImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回所创建类的Class对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UserDao.class;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#bean的生命周期\">#</a> bean 的生命周期</h3>\n<ul>\n<li>首先理解下什么是生命周期？\n<ul>\n<li>从创建到消亡的完整过程，例如人从出生到死亡的整个过程就是一个生命周期。</li>\n</ul>\n</li>\n<li>bean 生命周期是什么？\n<ul>\n<li>bean 对象从创建到销毁的整体过程。</li>\n</ul>\n</li>\n<li>bean 生命周期控制是什么？\n<ul>\n<li>在 bean 创建后到销毁前做一些事情。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h4>\n<ul>\n<li>创建一个 Maven 项目</li>\n<li>pom.xml 添加依赖</li>\n<li>resources 下添加 spring 的配置文件 applicationContext.xml</li>\n</ul>\n<p>(1) 项目中添加 BookDao、BookDaoImpl、BookService 和 BookServiceImpl 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBookDao</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) resources 下提供 spring 的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>(3) 编写 AppForLifeCycle 运行类，加载 Spring 的 IOC 容器，并从中获取对应的 bean 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppForLifeCycle</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String[] args )</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> </span><br><span class=\"line\">        \t<span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BookDao</span> <span class=\"variable\">bookDao</span> <span class=\"operator\">=</span> (BookDao) ctx.getBean(<span class=\"string\">&quot;bookDao&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"生命周期设置\"><a class=\"markdownIt-Anchor\" href=\"#生命周期设置\">#</a> 生命周期设置</h4>\n<p>在上面这个环境中来为 BookDao 添加生命周期的控制方法，具体的控制有两个阶段:</p>\n<ul>\n<li>bean 创建之后，想要添加内容，比如用来初始化需要用到资源</li>\n<li>bean 销毁之前，想要添加内容，比如用来释放用到的资源</li>\n</ul>\n<h5 id=\"步骤1添加初始化和销毁方法\"><a class=\"markdownIt-Anchor\" href=\"#步骤1添加初始化和销毁方法\">#</a> 步骤 1: 添加初始化和销毁方法</h5>\n<p>针对这两个阶段，BooDaoImpl 类中分别添加两个方法，<mark>方法名任意</mark></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//表示bean初始化对应的操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;init...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//表示bean销毁前对应的操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destory</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;destory...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤2配置生命周期\"><a class=\"markdownIt-Anchor\" href=\"#步骤2配置生命周期\">#</a> 步骤 2: 配置生命周期</h5>\n<p>在配置文件添加配置，如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;destory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤3运行程序\"><a class=\"markdownIt-Anchor\" href=\"#步骤3运行程序\">#</a> 步骤 3: 运行程序</h5>\n<p>运行 AppForLifeCycle 打印结果为:</p>\n<p>从结果中可以看出，init 方法执行了，但是 destroy 方法却未执行</p>\n<ul>\n<li>Spring 的 IOC 容器是运行在 JVM 中</li>\n<li>运行 main 方法后，JVM 启动，Spring 加载配置文件生成 IOC 容器，从容器获取 bean 对象，然后调方法执行</li>\n<li>main 方法执行完后，JVM 退出，这个时候 IOC 容器中的 bean 还没有来得及销毁就已经结束了</li>\n<li>所以没有调用对应的 destroy 方法</li>\n</ul>\n<h4 id=\"close关闭容器\"><a class=\"markdownIt-Anchor\" href=\"#close关闭容器\">#</a> close 关闭容器</h4>\n<ul>\n<li>\n<p>ApplicationContext 中没有 close 方法</p>\n</li>\n<li>\n<p>需要将 ApplicationContext 更换成 ClassPathXmlApplicationContext</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ClassPathXmlApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> </span><br><span class=\"line\">    <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调用 ctx 的 close () 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.close();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"注册钩子关闭容器\"><a class=\"markdownIt-Anchor\" href=\"#注册钩子关闭容器\">#</a> 注册钩子关闭容器</h4>\n<ul>\n<li>\n<p>在容器未关闭之前，提前设置好回调函数，让 JVM 在退出之前回调此函数来关闭容器</p>\n</li>\n<li>\n<p>调用 ctx 的 registerShutdownHook () 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.registerShutdownHook();</span><br></pre></td></tr></table></figure>\n<p>** 注意:**registerShutdownHook 在 ApplicationContext 中也没有</p>\n</li>\n<li>\n<p>运行后，查询打印结果</p>\n</li>\n</ul>\n<p>相同点：这两种都能用来关闭容器</p>\n<p>不同点:close () 是在调用的时候关闭，registerShutdownHook () 是在 JVM 退出前调用关闭。</p>\n<p>分析上面的实现过程，会发现添加初始化和销毁方法，即需要编码也需要配置，实现起来步骤比较多也比较乱。</p>\n<p>Spring 提供了两个接口来完成生命周期的控制，好处是可以不用再进行配置 <code>init-method</code>  和 <code>destroy-method</code></p>\n<p>接下来在 BookServiceImpl 完成这两个接口的使用:</p>\n<p>修改 BookServiceImpl 类，添加两个接口 <code>InitializingBean</code> ，  <code>DisposableBean</code>  并实现接口中的两个方法 <code>afterPropertiesSet</code>  和 <code>destroy</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span>, InitializingBean, DisposableBean &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBookDao</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service destroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;service init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>小细节</strong></p>\n<ul>\n<li>\n<p>对于 InitializingBean 接口中的 afterPropertiesSet 方法，翻译过来为 <code>属性设置之后</code> 。</p>\n</li>\n<li>\n<p>对于 BookServiceImpl 来说，bookDao 是它的一个属性</p>\n</li>\n<li>\n<p>setBookDao 方法是 Spring 的 IOC 容器为其注入属性的方法</p>\n<ul>\n<li>\n<p>从方法名分析，猜想应该是 setBookDao 方法先执行</p>\n</li>\n<li>\n<p>验证思路，在 setBookDao 方法中添加一句话</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBookDao</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;set .....&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>重新运行 AppForLifeCycle，打印结果如下:</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"bean生命周期小结\"><a class=\"markdownIt-Anchor\" href=\"#bean生命周期小结\">#</a> bean 生命周期小结</h4>\n<p>(1) 关于 Spring 中对 bean 生命周期控制提供了两种方式:</p>\n<ul>\n<li>在配置文件中的 bean 标签中添加 <code>init-method</code>  和 <code>destroy-method</code>  属性</li>\n<li>类实现 <code>InitializingBean</code>  与 <code>DisposableBean</code>  接口</li>\n</ul>\n<p>(2) 对于 bean 的生命周期控制在 bean 的整个生命周期中所处的位置如下:</p>\n<ul>\n<li>初始化容器\n<ul>\n<li>1. 创建对象 (内存分配)</li>\n<li>2. 执行构造方法</li>\n<li>3. 执行属性注入 (set 操作)</li>\n<li><mark>4. 执行 bean 初始化方法</mark></li>\n</ul>\n</li>\n<li>使用 bean\n<ul>\n<li>1. 执行业务操作</li>\n</ul>\n</li>\n<li>关闭 / 销毁容器\n<ul>\n<li><mark>1. 执行 bean 销毁方法</mark></li>\n</ul>\n</li>\n</ul>\n<p>(3) 关闭容器的两种方式:</p>\n<ul>\n<li>ConfigurableApplicationContext 是 ApplicationContext 的子类\n<ul>\n<li>close () 方法</li>\n<li>registerShutdownHook () 方法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-di相关内容\"><a class=\"markdownIt-Anchor\" href=\"#4-di相关内容\">#</a> 4 DI 相关内容</h2>\n<h3 id=\"setter注入\"><a class=\"markdownIt-Anchor\" href=\"#setter注入\">#</a> Setter 注入</h3>\n<p>在 bean 中定义引用类型属性，并提供可访问的 set 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBookDao</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置中使用 property 标签 ref 属性注入引用类型对象</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.imipl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;user dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBookDao</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用类型的注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>setter 方式的注入</p>\n<p>对于引用数据类型的使用的是<property name=\"\" ref=\"\"/></p>\n<p>对于简单数据类型的使用就是<property name=\"\" value=\"\"/></p>\n<h2 id=\"5-构造器的注入\"><a class=\"markdownIt-Anchor\" href=\"#5-构造器的注入\">#</a> 5 构造器的注入</h2>\n<p>构造器注入也就是构造方法的注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String databaseName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> connectionNum;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;user dao save ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBookDao</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造器注入引用数据类型</p>\n<blockquote>\n<p>需求：将 BookServiceImpl 类中的 bookDao 修改成为使用构造器的方式注入</p>\n<ol>\n<li>将 bookDao 中的 setter 方法删除</li>\n<li>添加带有 bookDao 参数的构造方法</li>\n<li>在 applicationContext.xml 中进行配置</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BookServiceImpl</span><span class=\"params\">(BookDao bookDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">       重点： <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>标签<constructor-arg>中</p>\n<ul>\n<li>name 属性对应的值为构造函数中的方法形参的参数名，必须要保持一致</li>\n<li>ref 属性指向的是 spring 的 IOC 容器中的其他 bean 对象</li>\n</ul>\n<p>构造器中注入多个引用的数据类型</p>\n<blockquote>\n<p>需求：在 BookServiceImpl 使用构造函数注入多个引用数据类型，比如 userDao</p>\n<ol>\n<li>\n<p>声明 userDao 属性</p>\n</li>\n<li>\n<p>生成一个带有 bookDao 和 userDao 参数的构造函数</p>\n</li>\n<li>\n<p>在 applicationContext.xml 中配置注入</p>\n</li>\n</ol>\n</blockquote>\n<p>1.<strong> 提供多个属性的构造函数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BookServiceImpl</span><span class=\"params\">(BookDao bookDao,UserDao userDao)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.bookDao = bookDao;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userDao = userDao;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book service save ...&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">        userDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;userDao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"构造器注入多个简单数据类型\"><a class=\"markdownIt-Anchor\" href=\"#构造器注入多个简单数据类型\">#</a> 构造器注入多个简单数据类型</h4>\n<blockquote>\n<p>需求：在 BookDaoImpl 中，使用构造函数注入 databaseName 和 connectionNum 两个参数。</p>\n<p>参考引用数据类型的注入，我们可以推出具体的步骤为:</p>\n<p>1. 提供一个包含这两个参数的构造方法</p>\n<p>2. 在 applicationContext.xml 中进行注入配置</p>\n</blockquote>\n<h5 id=\"步骤1添加多个简单属性并提供构造方法\"><a class=\"markdownIt-Anchor\" href=\"#步骤1添加多个简单属性并提供构造方法\">#</a> 步骤 1: 添加多个简单属性并提供构造方法</h5>\n<p>修改 BookDaoImpl 类，添加构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String databaseName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> connectionNum;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BookDaoImpl</span><span class=\"params\">(String databaseName, <span class=\"type\">int</span> connectionNum)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.databaseName = databaseName;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.connectionNum = connectionNum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>+databaseName+<span class=\"string\">&quot;,&quot;</span>+connectionNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤2配置完成多个属性构造器注入\"><a class=\"markdownIt-Anchor\" href=\"#步骤2配置完成多个属性构造器注入\">#</a> 步骤 2: 配置完成多个属性构造器注入</h5>\n<p>在 applicationContext.xml 中进行注入配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;databaseName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;mysql&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;connectionNum&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;666&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;userDao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>** 说明:** 这两个 <code>&lt;contructor-arg&gt;</code>  的配置顺序可以任意</p>\n<h5 id=\"步骤3运行程序-2\"><a class=\"markdownIt-Anchor\" href=\"#步骤3运行程序-2\">#</a> 步骤 3: 运行程序</h5>\n<p>运行 AppForDIConstructor 类，查看结果</p>\n<p>上面已经完成了构造函数注入的基本使用，但是会存在一些问题:</p>\n<ul>\n<li>当构造函数中方法的参数名发生变化后，配置文件中的 name 属性也需要跟着变</li>\n<li>这两块存在紧耦合</li>\n</ul>\n<p>方式一：删除 name 属性，添加 type 属性，然后按照类型注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;10&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;java.lang.String&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;mysql&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>这种方式可以解决构造函数形参名发生变化带来的耦合性</li>\n<li>但是如果构造方法参数中有类型相同的参数，这种方式不太适合</li>\n</ul>\n<p>方式二：删除 type 属性，添加 index 属性，按照索引下标注入，下标是从零开始的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;bookDaO class=&quot;com.ityueheng.dao.impl.BookDaoImpl&quot;&gt;</span><br><span class=\"line\">  &lt;constructor-arg index=&quot;0&quot; value=&quot;100&quot;&gt;</span><br><span class=\"line\">  &lt;constructor-arg index=&quot;1&quot; value=&quot;mysql&quot;&gt;</span><br><span class=\"line\">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这种方式可以解决参数类型重复问题</li>\n<li>但是如果构造方法参数顺序发生改变之后，这种方式又带来了耦合问题</li>\n</ul>\n<p>该如何选择</p>\n<ol>\n<li>强制依赖使用构造器注入，使用 setter 注入有概率不进行注入导致 null 对象出现</li>\n</ol>\n<p>强制依赖指的是对象在创建的时候就必须要注入指定的对象</p>\n<ol start=\"2\">\n<li>可选依赖使用 setter 注入进行，灵活性比较强</li>\n</ol>\n<p>可选依赖指的是对象在创建过程中必须要注入指定的参数</p>\n<ol start=\"3\">\n<li>spring 框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对来说比较严谨</li>\n<li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用 setter 注入完成可选依赖的注入</li>\n<li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供 setter 方法就必须要使用构造器方法注入</li>\n<li>自己开发的模块中推荐使用的是 setter 注入</li>\n</ol>\n<p>setter 注入</p>\n<ul>\n<li>简单数据类型</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prperty</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用数据类型</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>构造器注入</p>\n<ul>\n<li>简单数据类型</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用数据类型</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">...</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>依赖注入的方式选择上</p>\n<ul>\n<li>建议使用 setter 注入</li>\n<li>第三方技术根据情况选择</li>\n</ul>\n<h2 id=\"6-自动配置\"><a class=\"markdownIt-Anchor\" href=\"#6-自动配置\">#</a> 6 自动配置</h2>\n<p>什么是依赖自动装配？</p>\n<ul>\n<li>IOC 容器根据 bean 所依赖资源在容器中自动查找并注入到 bean 中的过程称为自动装配</li>\n</ul>\n<p>自动类型装配有哪些</p>\n<ul>\n<li>按照类型（常用）</li>\n<li>按照名称</li>\n<li>按照构造方法</li>\n<li>不启用自动装配</li>\n</ul>\n<h3 id=\"完成自动装配的配置\"><a class=\"markdownIt-Anchor\" href=\"#完成自动装配的配置\">#</a> 完成自动装配的配置</h3>\n<p>自动装配只需要修改 applicationContext.xml 配置文件即可；</p>\n<p>1）将<property>标签删除</p>\n<p>2）在<bean>标签中添加 autowire 属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byType&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li>需要注入属性的类中对应的属性的 setter 方法不能省略</li>\n<li>被注入的对象必须要被 spring 的 IOC 容器管理</li>\n<li>按照类型在 spring 的 IOC 容器中如果找到多个对象，会报 NoUniqueBeanDefinitionException</li>\n</ul>\n<p>一个类型在 IOC 中有多个对象，还想要注入成功，这个时候就必须要按照名称来进行注入，配置方式为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class=\"attr\">autowire</span>=<span class=\"string\">&quot;byName&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li>按照名称注入中的名称指的是什么？</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/lin-yueheng/IMG_01/main/img/202212031846014.png\" alt=\"image-20221203184643869\"></p>\n<p>bookDao 是 private 修饰的，外部类无法进行访问</p>\n<p>对于外部类来说只能进行 set 方法访问</p>\n<p>对于外部来说，setBookDao 方法名称，set 后首字母小写之后就是其属性名称</p>\n<ul>\n<li>如果按照名称去找对应的 bean 对象，找不到则注入 null</li>\n<li>当某一种类型在 IOC 容器中有多个对象，按照名称注入只找其指定名称对应的 bean 对象，不然会报错</li>\n</ul>\n<p>用的更多的是按照类型注入</p>\n<ol>\n<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>\n<li>使用按类型装配时 (byType) 必须要保证容器中的相同类型的 bean 唯一，推荐使用</li>\n<li>使用按照名次装配时 (byName) 必须要保障容器中具有指定名称的 bean，因变量与配置耦合，不推荐使用</li>\n<li>自动装配优先级低于 setter 注入和构造器注入，同时出现时自动装配配置失效</li>\n</ol>\n<h2 id=\"7-集合注入\"><a class=\"markdownIt-Anchor\" href=\"#7-集合注入\">#</a> 7 集合注入</h2>\n<p>常见的集合类型有：</p>\n<ul>\n<li>数组</li>\n<li>List</li>\n<li>Set</li>\n<li>Map</li>\n<li>Properties</li>\n</ul>\n<p>1）public interface BookDao {<br>\npublic void save();<br>\n}</p>\n<p>public class BookDaoImpl implements BookDao {</p>\n<p>public class BookDaoImpl implements BookDao {</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span>[] array;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;String&gt; list;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;String&gt; set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String,String&gt; map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Properties properties;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;遍历数组:&quot;</span> + Arrays.toString(array));</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;遍历List&quot;</span> + list);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;遍历Set&quot;</span> + set);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;遍历Map&quot;</span> + map);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;遍历Properties&quot;</span> + properties);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//setter....方法省略，自己使用工具生成</span></span><br></pre></td></tr></table></figure>\n<p>}</p>\n<p>(2) resources 下提供 spring 的配置文件，applicationContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>(3) 编写 AppForDICollection 运行类，加载 Spring 的 IOC 容器，并从中获取对应的 bean 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppForDICollection</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String[] args )</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BookDao</span> <span class=\"variable\">bookDao</span> <span class=\"operator\">=</span> (BookDao) ctx.getBean(<span class=\"string\">&quot;bookDao&quot;</span>);</span><br><span class=\"line\">        bookDao.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"注入数组类型数据\"><a class=\"markdownIt-Anchor\" href=\"#注入数组类型数据\">#</a> 注入数组类型数据</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;array&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>  100  <span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>  100  <span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>  100  <span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"注入list类型数据\"><a class=\"markdownIt-Anchor\" href=\"#注入list类型数据\">#</a> 注入 List 类型数据</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>itcast<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>itheima<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>boxuegu<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>chuanzhihui<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h4>\n<h4 id=\"注入set类型数据\"><a class=\"markdownIt-Anchor\" href=\"#注入set类型数据\">#</a> 注入 Set 类型数据</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;set&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>itcast<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>itheima<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>boxuegu<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>boxuegu<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\">#</a> </h4>\n<h4 id=\"注入map类型数据\"><a class=\"markdownIt-Anchor\" href=\"#注入map类型数据\">#</a> 注入 Map 类型数据</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;country&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;china&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;province&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;henan&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;kaifeng&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"-3\"><a class=\"markdownIt-Anchor\" href=\"#-3\">#</a> </h4>\n<h2 id=\"8-注入properties类型数据\"><a class=\"markdownIt-Anchor\" href=\"#8-注入properties类型数据\">#</a> 8 注入 Properties 类型数据</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;properties&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;country&quot;</span>&gt;</span>china<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span>beijing<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>说明；</p>\n<ul>\n<li>properties 标签中表示 setter 方式注入，构造方式 conStructor-arg 标签内部也可以写<array>。。。。</li>\n<li>List 的底层也是用数组实现的，所以<List>和<array>标签是可以混用的</li>\n<li>集合中要添加引用类型、只需要把<value>标签改成<ref>标签，这种方式使用的比较少</li>\n</ul>\n<h2 id=\"9-iocdi配置管理第三方bean\"><a class=\"markdownIt-Anchor\" href=\"#9-iocdi配置管理第三方bean\">#</a> 9 IOC/DI 配置管理第三方 bean</h2>\n<p>数据源对象管理</p>\n<blockquote>\n<p>需求：使用 Spring 的 IOC 容器来管理 Druid 连接池对象</p>\n<ol>\n<li>使用第三方的技术，需要在 pom.xml 添加依赖</li>\n<li>在配置文件中将【第三方的类】制作成一个 bean，让 IOC 容器来进行管理</li>\n<li>数据库连接池需要基础的四要素 驱动、连接、用户名、密码，【如何注入】到对应的 bean 中</li>\n<li>从 IOC 容器中获取对应的 bean 对象，将其打印到控制台中查看结果</li>\n</ol>\n</blockquote>\n<p>pom.xml 中添加依赖</p>\n<p>配置第三方的 bean</p>\n<p>在 applicationContext.xml 配置文件中添加 DruidDataSource 的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--管理DruidDataSource对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置第三方bean\"><a class=\"markdownIt-Anchor\" href=\"#配置第三方bean\">#</a> 配置第三方 bean</h3>\n<p>在 applicationContext.xml 配置文件中添加 <code>DruidDataSource</code>  的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--管理DruidDataSource对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>说明:</strong></p>\n<ul>\n<li>driverClassName: 数据库驱动</li>\n<li>url: 数据库连接地址</li>\n<li>username: 数据库连接用户名</li>\n<li>password: 数据库连接密码</li>\n<li>数据库连接的四要素要和自己使用的数据库信息一致。</li>\n</ul>\n<h3 id=\"从ioc容器中获取对应的bean对象\"><a class=\"markdownIt-Anchor\" href=\"#从ioc容器中获取对应的bean对象\">#</a> 从 IOC 容器中获取对应的 bean 对象</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;applicationContext.xml&quot;</span>);</span><br><span class=\"line\">       <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> (DataSource) ctx.getBean(<span class=\"string\">&quot;dataSource&quot;</span>);</span><br><span class=\"line\">       System.out.println(dataSource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"-4\"><a class=\"markdownIt-Anchor\" href=\"#-4\">#</a> </h5>\n<h3 id=\"实现c3p0管理\"><a class=\"markdownIt-Anchor\" href=\"#实现c3p0管理\">#</a> 实现 c3p0 管理</h3>\n<p>配置第三方 bean</p>\n<p>在 applicationContext.xml 配置文件中添加配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClass&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;jdbcUrl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;maxPoolSize&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1000&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>ComboPooleDataSource 的属性是通过 setter 方式注入</li>\n<li>想注入的属性就需要在 ComboPooleDataSource 类或者是上层类中提供属性对应的 setter 方法</li>\n<li>C3P0 的四个属性和 Druid 的四个属性是不一样的</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>数据连接池在配置属性的时候，除了可以注入数据库连接四个要素之外还可以配置很多其他的属性，具体都有哪些属性需要自己去查\n<ul>\n<li>Druid 和 C3P0 在没有导入 mysql 驱动包的前提之下，一个报错一个没报错，说明 Druid 在初始化的时候没有加载驱动，而 C3P0 刚好相反</li>\n<li>Druid 程序运行虽然没有报错，但是当调用 DruidDataSource 的 getConnection () 方法获取链接的时候，也会找不到驱动类的错误</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"加载properties配置文件\"><a class=\"markdownIt-Anchor\" href=\"#加载properties配置文件\">#</a> 加载 properties 配置文件</h3>\n<p>包含了一些问题</p>\n<ul>\n<li>\n<p>这两个数据源中都使用到了一些固定的常量如数据库连接四个要素，把这些值写在 Spring 的配置文件中不利于后期的维护</p>\n</li>\n<li>\n<p>需要将这些值提取到一个外部的 properties 配置文件中</p>\n</li>\n<li>\n<p>Spring 框架中如何从配置文件中读取属性值来配置就是接下来的问题</p>\n</li>\n</ul>\n<p>第三方 bean 属性优化</p>\n<h5 id=\"实现思路\"><a class=\"markdownIt-Anchor\" href=\"#实现思路\">#</a> 实现思路</h5>\n<blockquote>\n<p>需求：将数据库连接四要素提取到 properties 配置文件，spring 来加载配置信息并使用这些信息来完成属性注入。</p>\n<p>1. 在 resources 下创建一个 jdbc.properties (文件的名称可以任意)</p>\n<p>2. 将数据库连接四要素配置到配置文件中</p>\n<p>3. 在 Spring 的配置文件中加载 properties 文件</p>\n<p>4. 使用加载到的值实现属性注入</p>\n<p>其中第 3，4 步骤是重点关注的，具体是如何实现。</p>\n</blockquote>\n<h5 id=\"实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#实现步骤\">#</a> 实现步骤</h5>\n<p>准备好 properties 配置文件</p>\n<p>resource 下创建一个 jdbc.properties 文件，并添加对应的属性键值对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://127.0.0.1:3306/Database_name</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=root</span><br></pre></td></tr></table></figure>\n<p>在 applicationContext.xml 中开 context 命名空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span>         </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用 ${key} 来读取 properties 配置文件中的内容并完成属性注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"读取单个属性\"><a class=\"markdownIt-Anchor\" href=\"#读取单个属性\">#</a> <strong>读取单个属性</strong></h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.dao.impl.BookDaoImpl&quot;</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.User.impl.UserDaoImpl&quot;</span>&gt;</span>    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;bookDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;userDao&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;userDao&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    直接对实体类Student中的属性赋值--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;stu&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.pojo.Student&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;28&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;202110098141&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;林常恒&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ***</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bookDao1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.ityueheng.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li>问题一：键值对的 key 为 username 引发的问题</li>\n</ul>\n<ol>\n<li>在 properties 中配置键值对的时候，如果 key 设置为 username</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username=root666</span><br></pre></td></tr></table></figure>\n<p>出现问题的原因是 <code>&lt;context:property-placeholder/&gt;</code>  标签会加载系统的环境变量，而且环境变量的值会被优先加载，如何查看系统的环境变量？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; env = System.getenv();</span><br><span class=\"line\">    System.out.println(env);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;context:property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>system-properties-mode：设置为 NEVER，表示不加载系统的属性，就可以解决上述问题</p>\n<p>最好的解决方法就是避免使用 username 作为属性的 key</p>\n<p>当有多个 properties 配置文件需要被加载，该如何配置？</p>\n<p>1. 调整下配置文件的内容，在 resources 下添加 <code>jdbc.properties</code> , <code>jdbc2.properties</code> , 内容如下:</p>\n<p>jdbc.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n<p>jdbc2.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root666</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方式一：</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class=\"attr\">system-properties-mode</span>=<span class=\"string\">&quot;NEVER&quot;</span>&gt;</span></span><br><span class=\"line\">    方式二：</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;*.properties&quot;</span> <span class=\"attr\">system-properties-mode</span>=<span class=\"string\">&quot;NEVER&quot;</span>&gt;</span></span><br><span class=\"line\">        方式三：</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath:*.properties&quot;</span> <span class=\"attr\">system-properties-mode</span>=<span class=\"string\">&quot;NEVER&quot;</span>&gt;</span></span><br><span class=\"line\">                方式四：</span><br><span class=\"line\">                      <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">&quot;classpath*:*.properties&quot;</span> <span class=\"attr\">system-properties-mode</span>=<span class=\"string\">&quot;NEVER&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>方式一：可以实现，如果配置文件多的话，每个都需要配置</li>\n<li>方式二：*.properties 代表的是所有</li>\n<li>方式三：标准写法，classpath：代表的是从根路径开始查找，但是只能查询到当前项目的路径</li>\n<li>方式四：不仅可以加载当前项目还可以加载当前项目所依赖的所有项目的根路径下的 properties 配置文件</li>\n</ul>\n<p><img data-src=\"java-SSM.assets/image-20221209091913181.png\" alt=\"image-20221209091913181\"></p>\n<p><img data-src=\"java-SSM.assets/image-20221209093248647.png\" alt=\"image-20221209093248647\"></p>\n<h1 id=\"aop简介\"><a class=\"markdownIt-Anchor\" href=\"#aop简介\">#</a> AOP 简介：</h1>\n<p>Aop 就是在不改变原有的代码的情况下，对其进行增强</p>\n<h2 id=\"什么是aop\"><a class=\"markdownIt-Anchor\" href=\"#什么是aop\">#</a> 什么是 AOP?</h2>\n<ul>\n<li>AOP (Aspect Oriented Programming) 面向切面编程，一种编程范式，指导开发者如何组织程序结构。\n<ul>\n<li>OOP (Object Oriented Programming) 面向对象编程</li>\n</ul>\n</li>\n</ul>\n<p>OOP 是一种编程思想，那么 AOP 也是一种编程思想，编程思想主要的内容就是指导程序员该如何编写程序，所以它们两个是不同的 <code>编程范式</code> 。</p>\n<h3 id=\"aop作用\"><a class=\"markdownIt-Anchor\" href=\"#aop作用\">#</a> AOP 作用</h3>\n<ul>\n<li>作用：在不惊动原始设计的基础上为其进行功能增强，前面咱们有技术就可以实现这样的功能即代理模式。</li>\n</ul>\n<p>前面咱们有技术就可以实现这样的功能即 <code>代理模式</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//记录程序当前执行执行（开始时间）</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//业务执行万次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;book dao save ...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//记录程序当前执行时间（结束时间）</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">endTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"comment\">//计算时间差</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">totalTime</span> <span class=\"operator\">=</span> endTime-startTime;</span><br><span class=\"line\">        <span class=\"comment\">//输出信息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行万次消耗时间：&quot;</span> + totalTime + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao update ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao delete ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">select</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;book dao select ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"java-SSM.assets/image-20221210162709917.png\" alt=\"image-20221210162709917\"></p>\n<p>这段代码的其他方法 (update ()，delete ()，select ()) 也能够增加跟 save () 方法一样的功能。</p>\n<p>在不惊动 (改动) 原有设计 (代码) 的前提下，想给谁添加功能就给谁添加。这个也就是 Spring 的理念：</p>\n<ul>\n<li>无入侵式 / 无侵入式</li>\n</ul>\n<p><img data-src=\"java-SSM.assets/image-20221210162641272.png\" alt=\"image-20221210162641272\"></p>\n<ul>\n<li>连接点 (JoinPoint)：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等\n<ul>\n<li>在 SpringAOP 中，理解为方法的执行</li>\n</ul>\n</li>\n<li>切入点 (Pointcut): 匹配连接点的式子\n<ul>\n<li>在 SpringAOP 中，一个切入点可以描述一个具体方法，也可也匹配多个方法\n<ul>\n<li>一个具体的方法：如 com.itheima.dao 包下的 BookDao 接口中的无形参无返回值的 save 方法</li>\n<li>匹配多个方法：所有的 save 方法，所有的 get 开头的方法，所有以 Dao 结尾的接口中的任意方法，所有带有一个参数的方法</li>\n</ul>\n</li>\n<li>连接点范围要比切入点范围大，是切入点的方法也一定是连接点，但是是连接点的方法就不一定要被增强，所以可能不是切入点。</li>\n</ul>\n</li>\n<li>通知 (Advice): 在切入点处执行的操作，也就是共性功能\n<ul>\n<li>在 SpringAOP 中，功能最终以方法的形式呈现</li>\n</ul>\n</li>\n<li>通知类：定义通知的类</li>\n<li>切面 (Aspect): 描述通知与切入点的对应关系。</li>\n</ul>\n<h3 id=\"aop入门案例\"><a class=\"markdownIt-Anchor\" href=\"#aop入门案例\">#</a> AOP 入门案例</h3>\n<p>设定：在方法执行前输出当前系统时间。</p>\n<p>采用注解完成 AOP 的开发。</p>\n<blockquote>\n<p>1. 导入坐标 (pom.xml)</p>\n<p>2. 制作连接点 (原始操作，Dao 接口与实现类)</p>\n<p>3. 制作共性功能 (通知类与通知)</p>\n<p>4. 定义切入点</p>\n<p>5. 绑定切入点与通知关系 (切面)</p>\n</blockquote>\n<h3 id=\"24-aop实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#24-aop实现步骤\">#</a> 2.4 AOP 实现步骤</h3>\n<h4 id=\"步骤1添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#步骤1添加依赖\">#</a> 步骤 1: 添加依赖</h4>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"java-SSM.assets/1630146885493.png\" alt=\"1630146885493\"></p>\n<ul>\n<li>因为 <code>spring-context</code>  中已经导入了 <code>spring-aop</code> , 所以不需要再单独导入 <code>spring-aop</code></li>\n<li>导入 AspectJ 的 jar 包，AspectJ 是 AOP 思想的一个具体实现，Spring 有自己的 AOP 实现，但是相比于 AspectJ 来说比较麻烦，所以我们直接采用 Spring 整合 ApsectJ 的方式进行 AOP 开发。</li>\n</ul>\n<h4 id=\"步骤2定义接口与实现类\"><a class=\"markdownIt-Anchor\" href=\"#步骤2定义接口与实现类\">#</a> 步骤 2: 定义接口与实现类</h4>\n<h4 id=\"步骤3定义通知类和通知\"><a class=\"markdownIt-Anchor\" href=\"#步骤3定义通知类和通知\">#</a> 步骤 3: 定义通知类和通知</h4>\n<p>通知就是将共性功能抽取出来后形成的方法，共性功能指的就是当前系统时间的打印。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤4定义切入点\"><a class=\"markdownIt-Anchor\" href=\"#步骤4定义切入点\">#</a> 步骤 4: 定义切入点</h4>\n<p>BookDaoImpl 中有两个方法，分别是 save 和 update，我们要增强的是 update 方法，该如何定义呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span>   <span class=\"comment\">//定义通式子</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行<mark>位置</mark></p>\n<p><img data-src=\"java-SSM.assets/1630148447689.png\" alt=\"1630148447689\"></p>\n<p><strong>说明:</strong>@Before 翻译过来是之前，也就是说通知会在切入点方法执行之前执行</p>\n<h4 id=\"步骤6将通知类配给容器并标识其为切面类\"><a class=\"markdownIt-Anchor\" href=\"#步骤6将通知类配给容器并标识其为切面类\">#</a> 步骤 6: 将通知类配给容器并标识其为切面类</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤7开启注解格式aop功能\"><a class=\"markdownIt-Anchor\" href=\"#步骤7开启注解格式aop功能\">#</a> 步骤 7: 开启注解格式 AOP 功能</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"知识点1enableaspectjautoproxy\"><a class=\"markdownIt-Anchor\" href=\"#知识点1enableaspectjautoproxy\">#</a> 知识点 1：@EnableAspectJAutoProxy</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@EnableAspectJAutoProxy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>配置类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>配置类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>开启注解格式 AOP 功能</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"知识点2aspect\"><a class=\"markdownIt-Anchor\" href=\"#知识点2aspect\">#</a> 知识点 2：@Aspect</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Aspect</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>类注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>切面类定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前类为 AOP 切面类</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"知识点3pointcut\"><a class=\"markdownIt-Anchor\" href=\"#知识点3pointcut\">#</a> 知识点 3：@Pointcut</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Pointcut</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>方法注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>切入点方法定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置切入点方法</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>value（默认）：切入点表达式</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"知识点4before\"><a class=\"markdownIt-Anchor\" href=\"#知识点4before\">#</a> 知识点 4：@Before</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>@Before</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型</td>\n<td>方法注解</td>\n</tr>\n<tr>\n<td>位置</td>\n<td>通知方法定义上方</td>\n</tr>\n<tr>\n<td>作用</td>\n<td>设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"aop工作流程\"><a class=\"markdownIt-Anchor\" href=\"#aop工作流程\">#</a> AOP 工作流程</h3>\n<p>由于 AOP 是基于 Spring 容器管理的 bean 做的增强，所以整个工作过程需要从 Spring 加载 bean 说起:</p>\n<h4 id=\"流程1spring容器启动\"><a class=\"markdownIt-Anchor\" href=\"#流程1spring容器启动\">#</a> 流程 1:Spring 容器启动</h4>\n<ul>\n<li>容器启动就需要去加载 bean, 哪些类需要被加载呢？</li>\n<li>需要被增强的类，如：BookServiceImpl</li>\n<li>通知类，如：MyAdvice</li>\n<li>注意此时 bean 对象还没有创建成功</li>\n</ul>\n<h4 id=\"流程2读取所有切面配置中的切入点\"><a class=\"markdownIt-Anchor\" href=\"#流程2读取所有切面配置中的切入点\">#</a> 流程 2: 读取所有切面配置中的切入点</h4>\n<p><img data-src=\"java-SSM.assets/1630151682428.png\" alt=\"1630151682428\"></p>\n<ul>\n<li>上面这个例子中有两个切入点的配置，但是第一个 <code>ptx()</code>  并没有被使用，所以不会被读取。</li>\n</ul>\n<h4 id=\"流程3初始化bean\"><a class=\"markdownIt-Anchor\" href=\"#流程3初始化bean\">#</a> 流程 3: 初始化 bean，</h4>\n<p>判定 bean 对应的类中的方法是否匹配到任意切入点</p>\n<ul>\n<li>\n<p>注意第 1 步在容器启动的时候，bean 对象还没有被创建成功。</p>\n</li>\n<li>\n<p>要被实例化 bean 对象的类中的方法和切入点进行匹配</p>\n<p><img data-src=\"java-SSM.assets/1630152538083.png\" alt=\"1630152538083\"></p>\n<ul>\n<li>匹配失败，创建原始对象，如 <code>UserDao</code>\n<ul>\n<li>匹配失败说明不需要增强，直接调用原始对象的方法即可。</li>\n</ul>\n</li>\n<li>匹配成功，创建原始对象（<mark>目标对象</mark>）的<mark>代理</mark>对象，如: <code>BookDao</code>\n<ul>\n<li>匹配成功说明需要对其进行增强</li>\n<li>对哪个类做增强，这个类对应的对象就叫做目标对象</li>\n<li>因为要对目标对象进行功能增强，而采用的技术是动态代理，所以会为其创建一个代理对象</li>\n<li>最终运行的是代理对象的方法，在该方法中会对原始方法进行功能增强</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"流程4获取bean执行方法\"><a class=\"markdownIt-Anchor\" href=\"#流程4获取bean执行方法\">#</a> 流程 4: 获取 bean 执行方法</h4>\n<ul>\n<li>获取的 bean 是原始对象时，调用方法并执行，完成操作</li>\n<li>获取的 bean 是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li>\n</ul>\n<h4 id=\"验证容器中是否为代理对象\"><a class=\"markdownIt-Anchor\" href=\"#验证容器中是否为代理对象\">#</a> 验证容器中是否为代理对象</h4>\n<p>为了验证 IOC 容器中创建的对象和我们刚才所说的结论是否一致，首先先把结论理出来:</p>\n<ul>\n<li>如果目标对象中的方法会被增强，那么容器中将存入的是目标对象的代理对象</li>\n<li>如果目标对象中的方法不被增强，那么容器中将存入的是目标对象本身。</li>\n</ul>\n<h5 id=\"步骤1修改app类获取类的类型\"><a class=\"markdownIt-Anchor\" href=\"#步骤1修改app类获取类的类型\">#</a> 步骤 1: 修改 App 类，获取类的类型</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">App</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class=\"line\">        <span class=\"type\">BookDao</span> <span class=\"variable\">bookDao</span> <span class=\"operator\">=</span> ctx.getBean(BookDao.class);</span><br><span class=\"line\">        System.out.println(bookDao);</span><br><span class=\"line\">        System.out.println(bookDao.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤2修改myadvice类不增强\"><a class=\"markdownIt-Anchor\" href=\"#步骤2修改myadvice类不增强\">#</a> 步骤 2: 修改 MyAdvice 类，不增强</h5>\n<p>因为定义的切入点中，被修改成 <code>update1</code> , 所以 BookDao 中的 update 方法在执行的时候，就不会被增强，</p>\n<p>所以容器中的对象应该是目标对象本身。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update1())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤3运行程序-3\"><a class=\"markdownIt-Anchor\" href=\"#步骤3运行程序-3\">#</a> 步骤 3: 运行程序</h5>\n<p><img data-src=\"java-SSM.assets/1630154495165.png\" alt=\"1630154495165\"></p>\n<h5 id=\"步骤4修改myadvice类增强\"><a class=\"markdownIt-Anchor\" href=\"#步骤4修改myadvice类增强\">#</a> 步骤 4: 修改 MyAdvice 类，增强</h5>\n<p>因为定义的切入点中，被修改成 <code>update</code> , 所以 BookDao 中的 update 方法在执行的时候，就会被增强，</p>\n<p>所以容器中的对象应该是目标对象的代理对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤5运行程序\"><a class=\"markdownIt-Anchor\" href=\"#步骤5运行程序\">#</a> 步骤 5: 运行程序</h5>\n<p><img data-src=\"java-SSM.assets/1630154625564.png\" alt=\"1630154625564\"></p>\n<p>描述方式一：执行 com.itheima.dao 包下的 BookDao 接口中的无参数 update 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(<span class=\"keyword\">void</span> com.itheima.dao.BookDao.update())</span><br></pre></td></tr></table></figure>\n<p>描述方式二：执行 com.itheima.dao.impl 包下的 BookDaoImpl 类中的无参数 update 方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(void com.itheima.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure>\n<p>对于切入点表达式的语法为:</p>\n<ul>\n<li>切入点表达式标准格式：动作关键字 (访问修饰符  返回值  包名。类 / 接口名。方法名 (参数) 异常名）</li>\n</ul>\n<p>对于这个格式，不需要硬记，通过一个例子，理解它:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(public User com.itheima.service.UserService.findById(int))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>execution：动作关键字，描述切入点的行为动作，例如 execution 表示执行到指定切入点</li>\n<li>public: 访问修饰符，还可以是 public，private 等，可以省略</li>\n<li>User：返回值，写返回值类型</li>\n<li>com.itheima.service：包名，多级包使用点连接</li>\n<li>UserService: 类 / 接口名称</li>\n<li>findById：方法名</li>\n<li>int: 参数，直接写参数的类型，多个类型用逗号隔开</li>\n<li>异常名：方法定义中抛出指定异常，可以省略</li>\n</ul>\n<p>切入点表达式就是要找到需要增强的方法</p>\n<h3 id=\"语法格式和通配符号\"><a class=\"markdownIt-Anchor\" href=\"#语法格式和通配符号\">#</a> 语法格式和通配符号</h3>\n<ul>\n<li>\n<p><code>*</code> : 单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution（public * com.itheima.*.UserService.find*(*))</span><br></pre></td></tr></table></figure>\n<p>匹配 com.itheima 包下的任意包中的 UserService 类或接口中所有 find 开头的带有一个参数的方法</p>\n</li>\n<li>\n<p><code>..</code> ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution（public User com..UserService.findById(..))</span><br></pre></td></tr></table></figure>\n<p>匹配 com 包下的任意包中的 UserService 类或接口中所有名称为 findById 的方法</p>\n</li>\n<li>\n<p><code>+</code> ：专用于匹配子类类型</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure>\n<p>这个使用率较低，描述子类的，继承机会就一次，使用都很慎重，所以很少用它。*Service+，表示所有以 Service 结尾的接口的子类。</p>\n</li>\n</ul>\n<p><img data-src=\"java-SSM.assets/1630163744963.png\" alt=\"1630163744963\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(<span class=\"keyword\">void</span> com.itheima.dao.BookDao.update())</span><br><span class=\"line\">匹配接口，能匹配到</span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class=\"line\">匹配实现类，能匹配到</span><br><span class=\"line\">execution(* com.itheima.dao.impl.BookDaoImpl.update())</span><br><span class=\"line\">返回值任意，能匹配到</span><br><span class=\"line\">execution(* com.itheima.dao.impl.BookDaoImpl.update(*))</span><br><span class=\"line\">返回值任意，但是update方法必须要有一个参数，无法匹配，要想匹配需要在update接口和实现类添加参数</span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.*.*.*.*.update())</span><br><span class=\"line\">返回值为<span class=\"keyword\">void</span>,com包下的任意包三层包下的任意类的update方法，匹配到的是实现类，能匹配</span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com.*.*.*.update())</span><br><span class=\"line\">返回值为<span class=\"keyword\">void</span>,com包下的任意两层包下的任意类的update方法，匹配到的是接口，能匹配</span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> *..update())</span><br><span class=\"line\">返回值为<span class=\"keyword\">void</span>，方法名是update的任意包下的任意类，能匹配</span><br><span class=\"line\">execution(* *..*(..))</span><br><span class=\"line\">匹配项目中任意类的任意方法，能匹配，但是不建议使用这种方式，影响范围广</span><br><span class=\"line\">execution(* *..u*(..))</span><br><span class=\"line\">匹配项目中任意包任意类下只要以u开头的方法，update方法能满足，能匹配</span><br><span class=\"line\">execution(* *..*e(..))</span><br><span class=\"line\">匹配项目中任意包任意类下只要以e结尾的方法，update和save方法能满足，能匹配</span><br><span class=\"line\">execution(<span class=\"keyword\">void</span> com..*())</span><br><span class=\"line\">返回值为<span class=\"keyword\">void</span>，com包下的任意包任意类任意方法，能匹配，*代表的是方法</span><br><span class=\"line\">execution(* com.itheima.*.*Service.find*(..))</span><br><span class=\"line\">将项目中所有业务层方法的以find开头的方法匹配</span><br><span class=\"line\">execution(* com.itheima.*.*Service.save*(..))</span><br><span class=\"line\">将项目中所有业务层方法的以save开头的方法匹配</span><br></pre></td></tr></table></figure>\n<p>后面两种更符合我们平常切入点表达式的编写规则</p>\n<h4 id=\"书写技巧\"><a class=\"markdownIt-Anchor\" href=\"#书写技巧\">#</a> 书写技巧</h4>\n<p>对于切入点表达式的编写其实是很灵活的，那么在编写的时候，有没有什么好的技巧让我们用用:</p>\n<ul>\n<li>所有代码按照标准规范开发，否则以下技巧全部失效</li>\n<li>描述切入点通 **<mark> 常描述接口</mark> **，而不描述实现类，如果描述到实现类，就出现紧耦合了</li>\n<li>访问控制修饰符针对接口开发均采用 public 描述（<strong><mark>可省略访问控制修饰符描述</mark></strong>）</li>\n<li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用 * 通配快速描述</li>\n<li><strong><mark>包名</mark><strong>书写</strong><mark>尽量不使用… 匹配</mark></strong>，效率过低，常用 * 做单个包描述匹配，或精准匹配</li>\n<li><strong><mark>接口名 / 类名</mark><strong>书写名称与模块相关的</strong><mark>采用 * 匹配</mark></strong>，例如 UserService 书写成 * Service，绑定业务层接口名</li>\n<li><strong><mark>方法名</mark><strong>书写以</strong><mark>动词</mark><strong>进行</strong><mark>精准匹配</mark></strong>，名词采用<em>匹配，例如 getById 书写成 getBy</em>,selectAll 书写成 selectAll</li>\n<li>参数规则较为复杂，根据业务方法灵活调整</li>\n<li>通常 **<mark> 不使用异常</mark><strong>作为</strong><mark>匹配</mark> ** 规则</li>\n</ul>\n<p>共提供了 5 种通知类型:</p>\n<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li><strong><mark>环绕通知 (重点)</mark></strong></li>\n<li>返回后通知 (了解)</li>\n<li>抛出异常后通知 (了解)</li>\n</ul>\n<p><img data-src=\"java-SSM.assets/1630166147697.png\" alt=\"1630166147697\"></p>\n<p>(1) 前置通知，追加功能到方法执行前，类似于在代码 1 或者代码 2 添加内容</p>\n<p>(2) 后置通知，追加功能到方法执行后，不管方法执行的过程中有没有抛出异常都会执行，类似于在代码 5 添加内容</p>\n<p>(3) 返回后通知，追加功能到方法执行后，只有方法正常执行结束后才进行，类似于在代码 3 添加内容，如果方法执行抛出异常，返回后通知将不会被添加</p>\n<p>(4) 抛出异常后通知，追加功能到方法抛出异常后，只有方法执行出异常才进行，类似于在代码 4 添加内容，只有方法抛出异常后才会被添加</p>\n<p>(5) 环绕通知，环绕通知功能比较强大，它可以追加功能到方法执行的前后，这也是比较常用的方式，它可以实现其他四种通知类型的功能</p>\n<h5 id=\"前置通知\"><a class=\"markdownIt-Anchor\" href=\"#前置通知\">#</a> 前置通知</h5>\n<p>修改 MyAdvice, 在 before 方法上添加 <code>@Before注解</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">//此处也可以写成 @Before(&quot;MyAdvice.pt()&quot;),不建议</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before advice ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"后置通知\"><a class=\"markdownIt-Anchor\" href=\"#后置通知\">#</a> 后置通知</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before advice ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after advice ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"环绕通知\"><a class=\"markdownIt-Anchor\" href=\"#环绕通知\">#</a> 环绕通知</h5>\n<h6 id=\"基本使用\"><a class=\"markdownIt-Anchor\" href=\"#基本使用\">#</a> 基本使用</h6>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;around before advice ...&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//表示对原始操作的调用</span></span><br><span class=\"line\">        pjp.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;around after advice ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>标准格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt2</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt2()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">aroundSelect</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;around before advice ...&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//表示对原始操作的调用</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> pjp.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;around after advice ...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>说明:</strong></p>\n<p>​\t为什么返回的是 Object 而不是 int 的主要原因是 Object 类型更通用。</p>\n<p>​\t在环绕通知中是可以对原始方法返回值就行修改的。</p>\n<h5 id=\"返回后通知\"><a class=\"markdownIt-Anchor\" href=\"#返回后通知\">#</a> 返回后通知</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt2</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterReturning advice ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"异常后通知\"><a class=\"markdownIt-Anchor\" href=\"#异常后通知\">#</a> 异常后通知</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(int com.itheima.dao.BookDao.select())&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt2</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为环绕通知是可以控制原始方法执行的，所以把增强的代码写在调用原始方法的不同位置就可以实现不同的通知类型的功能，如:</p>\n<p><img data-src=\"java-SSM.assets/1630170090945.png\" alt=\"1630170090945\"></p>\n<h5 id=\"-5\"><a class=\"markdownIt-Anchor\" href=\"#-5\">#</a> </h5>\n<h4 id=\"获取参数\"><a class=\"markdownIt-Anchor\" href=\"#获取参数\">#</a> 获取参数</h4>\n<h5 id=\"非环绕通知获取方式\"><a class=\"markdownIt-Anchor\" href=\"#非环绕通知获取方式\">#</a> 非环绕通知获取方式</h5>\n<p>在方法上添加 JoinPoint, 通过 JoinPoint 来获取参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(JoinPoint jp)</span> </span><br><span class=\"line\">        Object[] args = jp.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before advice ...&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//...其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"java-SSM.assets/1630233291929.png\" alt=\"1630233291929\"></p>\n<p>参数的个数是不固定的，所以使用数组更通配些。</p>\n<h5 id=\"环绕通知获取方式\"><a class=\"markdownIt-Anchor\" href=\"#环绕通知获取方式\">#</a> 环绕通知获取方式</h5>\n<p>环绕通知使用的是 ProceedingJoinPoint，因为 ProceedingJoinPoint 是 JoinPoint 类的子类，所以对于 ProceedingJoinPoint 类中应该也会有对应的 <code>getArgs()</code>  方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp)</span><span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> pjp.proceed();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行 App 后查看运行结果，说明 ProceedingJoinPoint 也是可以通过 getArgs () 获取参数</p>\n<p><img data-src=\"java-SSM.assets/1630233974310.png\" alt=\"1630233974310\"></p>\n<ul>\n<li>\n<p>pjp.proceed () 方法是有两个构造方法，分别是:</p>\n<p><img data-src=\"java-SSM.assets/1630234756123.png\" alt=\"1630234756123\"></p>\n<ul>\n<li>\n<p>调用无参数的 proceed，当原始方法有参数，会在调用的过程中自动传入参数</p>\n</li>\n<li>\n<p>所以调用这两个方法的任意一个都可以完成功能</p>\n</li>\n<li>\n<p>但是当需要修改原始方法的参数时，就只能采用带有参数的方法，如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable&#123;</span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\">        args[<span class=\"number\">0</span>] = <span class=\"number\">666</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> pjp.proceed(args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了这个特性后，就可以在环绕通知中对原始方法的参数进行拦截过滤，避免由于参数的问题导致程序无法正确运行，保证代码的健壮性。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"获取返回值\"><a class=\"markdownIt-Anchor\" href=\"#获取返回值\">#</a> 获取返回值</h4>\n<p>对于返回值，只有返回后 <code>AfterReturing</code>  和环绕 <code>Around</code>  这两个通知类型可以获取，具体如何获取？</p>\n<h5 id=\"环绕通知获取返回值\"><a class=\"markdownIt-Anchor\" href=\"#环绕通知获取返回值\">#</a> 环绕通知获取返回值</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable&#123;</span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\">        args[<span class=\"number\">0</span>] = <span class=\"number\">666</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> pjp.proceed(args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中， <code>ret</code>  就是方法的返回值，我们是可以直接获取，不但可以获取，如果需要还可以进行修改。</p>\n<h5 id=\"返回后通知获取返回值\"><a class=\"markdownIt-Anchor\" href=\"#返回后通知获取返回值\">#</a> 返回后通知获取返回值</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object ret)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterReturning advice ...&quot;</span>+ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><mark>注意:</mark></p>\n<p>(1) 参数名的问题</p>\n<p><img data-src=\"java-SSM.assets/1630237320870.png\" alt=\"1630237320870\"></p>\n<p>(2) afterReturning 方法参数类型的问题</p>\n<p>参数类型可以写成 String，但是为了能匹配更多的参数类型，最好写成 Object 类型</p>\n<p>(3) afterReturning 方法参数的顺序问题</p>\n<p><img data-src=\"java-SSM.assets/1630237586682.png\" alt=\"1630237586682\"></p>\n<p>运行 App 后查看运行结果，说明返回值已经被获取到</p>\n<p><img data-src=\"java-SSM.assets/1630237372286.png\" alt=\"1630237372286\"></p>\n<h4 id=\"-6\"><a class=\"markdownIt-Anchor\" href=\"#-6\">#</a> </h4>\n<h4 id=\"获取异常\"><a class=\"markdownIt-Anchor\" href=\"#获取异常\">#</a> 获取异常</h4>\n<p>对于获取抛出的异常，只有抛出异常后 <code>AfterThrowing</code>  和环绕 <code>Around</code>  这两个通知类型可以获取</p>\n<h5 id=\"环绕通知获取异常\"><a class=\"markdownIt-Anchor\" href=\"#环绕通知获取异常\">#</a> 环绕通知获取异常</h5>\n<p>只需要将异常捕获，就可以获取到原始方法的异常信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint pjp)</span>&#123;</span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        System.out.println(Arrays.toString(args));</span><br><span class=\"line\">        args[<span class=\"number\">0</span>] = <span class=\"number\">666</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            ret = pjp.proceed(args);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Throwable throwable)&#123;</span><br><span class=\"line\">            t.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 catch 方法中就可以获取到异常</p>\n<h5 id=\"抛出异常后通知获取异常\"><a class=\"markdownIt-Anchor\" href=\"#抛出异常后通知获取异常\">#</a> 抛出异常后通知获取异常</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">(Throwable t)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;afterThrowing advice ...&quot;</span>+t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他的略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让原始方法抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">findName</span><span class=\"params\">(<span class=\"type\">int</span> id,String password)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;id:&quot;</span>+id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;itcast&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><mark>注意:</mark></p>\n<p><img data-src=\"java-SSM.assets/1630239939043.png\" alt=\"1630239939043\"></p>\n<p>异常信息</p>\n<p><img data-src=\"java-SSM.assets/1630239997560.png\" alt=\"1630239997560\"></p>\n<h2 id=\"百度网盘密码数据兼容处理\"><a class=\"markdownIt-Anchor\" href=\"#百度网盘密码数据兼容处理\">#</a> 百度网盘密码数据兼容处理</h2>\n<h4 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\">#</a> 需求分析</h4>\n<p>需求：对百度网盘分享链接输入密码时尾部多输入的空格做兼容处理。</p>\n<p><img data-src=\"java-SSM.assets/1630240203033.png\" alt=\"1630240203033\"></p>\n<p>问题描述:</p>\n<ul>\n<li>\n<p>点击链接，会提示，请输入提取码</p>\n<p><img data-src=\"java-SSM.assets/1630240528228.png\" alt=\"1630240528228\"></p>\n</li>\n</ul>\n<h4 id=\"具体实现\"><a class=\"markdownIt-Anchor\" href=\"#具体实现\">#</a> 具体实现</h4>\n<h5 id=\"步骤1开启springaop的注解功能\"><a class=\"markdownIt-Anchor\" href=\"#步骤1开启springaop的注解功能\">#</a> 步骤 1: 开启 SpringAOP 的注解功能</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&quot;com.ityueheng&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤2编写通知类\"><a class=\"markdownIt-Anchor\" href=\"#步骤2编写通知类\">#</a> 步骤 2: 编写通知类</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(boolean com.ityueheng.service.*Service.*(*,*))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">servicePt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤3添加环绕通知\"><a class=\"markdownIt-Anchor\" href=\"#步骤3添加环绕通知\">#</a> 步骤 3: 添加环绕通知</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(boolean com.ityueheng.service.*Service.*(*,*))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">servicePt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// @Around(&quot;servicePt()&quot;)这两种写法都对</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">trimStr</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> pjp.proceed();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤4完成核心业务处理参数中的空格\"><a class=\"markdownIt-Anchor\" href=\"#步骤4完成核心业务处理参数中的空格\">#</a> 步骤 4: 完成核心业务，处理参数中的空格</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataAdvice</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(boolean com.ityueheng.service.*Service.*(*,*))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">servicePt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">// @Around(&quot;servicePt()&quot;)这两种写法都对</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">trimStr</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取原始方法的参数</span></span><br><span class=\"line\">        Object[] args = pjp.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; args.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断参数是不是字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(args[i].getClass().equals(String.class))&#123;</span><br><span class=\"line\">                args[i] = args[i].toString().trim();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将修改后的参数传入到原始方法的执行中</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> pjp.proceed(args);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"步骤5运行程序-2\"><a class=\"markdownIt-Anchor\" href=\"#步骤5运行程序-2\">#</a> 步骤 5: 运行程序</h5>\n<p>不管密码 <code>root</code>  前后是否加空格，最终控制台打印的都是 true</p>\n<h5 id=\"步骤6优化测试\"><a class=\"markdownIt-Anchor\" href=\"#步骤6优化测试\">#</a> 步骤 6: 优化测试</h5>\n<p>为了能更好的看出 AOP 已经生效，我们可以修改 ResourcesImpl 类，在方法中将密码的长度进行打印</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResourcesDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ResourcesDao</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">readResources</span><span class=\"params\">(String url, String password)</span> &#123;</span><br><span class=\"line\">        System.out.println(password.length());</span><br><span class=\"line\">        <span class=\"comment\">//模拟校验</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> password.equals(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次运行成功，就可以根据最终打印的长度来看看，字符串的空格有没有被去除掉。</p>\n<p><strong>注意：</strong></p>\n<p><img data-src=\"java-SSM.assets/1630242491831.png\" alt=\"1630242491831\"></p>\n<h2 id=\"-7\"><a class=\"markdownIt-Anchor\" href=\"#-7\">#</a> </h2>\n<h2 id=\"aop总结\"><a class=\"markdownIt-Anchor\" href=\"#aop总结\">#</a> AOP 总结</h2>\n<h3 id=\"aop的核心概念\"><a class=\"markdownIt-Anchor\" href=\"#aop的核心概念\">#</a> AOP 的核心概念：</h3>\n<p>概念：AOP (Aspect Oriented Programming) 面向切面编程，一种编程范式</p>\n<p>作用：就是在不惊动原始代码的情况下为方法增加功能</p>\n<p>核心概念</p>\n<ul>\n<li>代理（proxy）:SpringAOP 的核心本质就是采用代理模式来实现的</li>\n<li>连接点 (JoinPoint)：在 springAOP 中，理解为任意方法的执行</li>\n<li>切入点 (Poincut)：匹配连接点的式子，也是具有共性功能的方法描述</li>\n<li>通知 (Advice)：若干个方法的共性功能，在切入点执行，最终体现为一个方法</li>\n<li>切面 (Aspect): 描述切入点和通知的对应关系</li>\n<li>目标对象 (Target)：被代理的原始对象成为目标对象</li>\n</ul>\n<h3 id=\"切入点表达式\"><a class=\"markdownIt-Anchor\" href=\"#切入点表达式\">#</a> 切入点表达式</h3>\n<ul>\n<li>切入点标准表达式格式：动作关键字 (访问修饰符 返回值类型 包名。类 / 接口名。方法名（参数）异常名)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.itheima.service.*service.*(..))</span><br></pre></td></tr></table></figure>\n<p>切入点表达式描述通配符：</p>\n<ul>\n<li>作用：用于快速描述，范围描述</li>\n<li>*: 匹配任意的符号（常用）</li>\n<li>…：匹配多个连续的任意符号 (常用)</li>\n<li>+: 匹配子类类型</li>\n</ul>\n<p>切入点表达是书写技巧</p>\n<ol>\n<li>按照标准的规范开发</li>\n<li>查询操作的返回值建议使用 * 匹配</li>\n<li>减少适用… 的形式描述包</li>\n<li>对接口进行描述，使用表示模块名称，例如 UserService 的匹配描述为 * Service</li>\n<li>方法名书写保留动词，例如 get，使用<em>表示名词，例如 getById 匹配描述为 getBy</em></li>\n<li>参数根据实际情况灵活进行调整</li>\n</ol>\n<h3 id=\"五种通知类型\"><a class=\"markdownIt-Anchor\" href=\"#五种通知类型\">#</a> 五种通知类型</h3>\n<ul>\n<li>前置通知</li>\n<li>后置通知</li>\n<li>环绕通知 (重点)\n<ul>\n<li>环绕通知依赖形参 ProceedingJoinPoint 才能实现对原始方法的调用</li>\n<li>环绕通知可以隔离原始方法的调用执行</li>\n<li>环绕通知返回值设置为 Object 类型</li>\n<li>环绕通知中可以对原始方法调用过程中出现的异常进行处理</li>\n</ul>\n</li>\n<li>返回后通知</li>\n<li>抛出异常后通知</li>\n</ul>\n<h3 id=\"通知中获取参数\"><a class=\"markdownIt-Anchor\" href=\"#通知中获取参数\">#</a> 通知中获取参数</h3>\n<ul>\n<li>获取切入点方法的参数，所有的通知类型都可以获取参数</li>\n</ul>\n<p>JoinPoint: 适用于前置、后置、返回后、抛出异常后通知</p>\n<p>proceedingJoinPoint：适用于环绕通知</p>\n<ul>\n<li>获取切入点方法返回值，前置和抛出异常后通知是没有返回值，后置通知可有可无，所以不做研究\n<ul>\n<li>返回后通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n<li>获取切入点方法运行异常信息，前置和返回后通知是不会有，后置通知可有可无，所以不做研究\n<ul>\n<li>抛出异常后通知</li>\n<li>环绕通知</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"-8\"><a class=\"markdownIt-Anchor\" href=\"#-8\">#</a> </h2>\n<h2 id=\"aop事务管理\"><a class=\"markdownIt-Anchor\" href=\"#aop事务管理\">#</a> AOP 事务管理</h2>\n",
            "tags": []
        }
    ]
}